#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2015 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.




# extract all addresses found in a list of email files from stdin
extract_mails() {
    mailpaths=( ${=stdin} )
    _tot=${#mailpaths}

    act "$_tot emails to parse"


    typeset -a _match

    [[ ${_tot} -gt 100 ]] && {
        act "operation will take a while, showing progress"
        _prog=0
        c=0
    }

    # learn from senders, recipients or all
    _action=${1:-all}
    # optional second argument limits parsing to header fields
    [[ "$_action" = "all" ]] || _arg="-x $_action"

    act "parsing $_action fields"
    _match=()

    for m in ${mailpaths}; do
        # use RFC822 parser in fetchaddr
        _parsed=`hdr $m | ${WORKDIR}/bin/fetchaddr ${=_arg} -a`
        for _p in ${(f)_parsed}; do

            _e="${(Q)_p[(ws:,:)1]:l}"
            # check if an email address was found
            isemail "$_e" || continue
            # extract also the name using comma separator
            _n="${(Q)_p[(ws:,:)2]}"
            
            func "match: ${_n} <$_e>"
            _match+=("${_n} <$_e>")
        done

        [[ $_tot -gt 100 ]] && {
            c=$(( $c + 1 ))
            [[ $c -gt 99 ]] && {
                _prog=$(( $_prog + $c ))
                act "$_prog / $_tot processed so far"
                c=1
            }
        }
    done

    _found=0
    for _l in ${_match}; do
        print - "$_l"
        _found=$(( $_found + 1 ))
    done

    notice "${#_match} addresses extracted (including duplicates)"
}

# extract all addresses found into a maildir
extract_maildir() {
    ## first arg is a directory
    md="$1"
    func "extract maildir: $md"
    ## extract from a maildir
    maildircheck "$md" || return 1
    
    _action="$2"
    case $_action in
        all) ;;
        recipient) ;;
        sender) ;;
        *) _action="all" ;;
    esac
    
    # search files
    _mails=`find $md -type f`
    # search symlinks
    _mails+=`find $md -type l`

    stdin="$_mails"; extract_mails "$_action"

    return 0
}

read_stdin() { # fills global stdin
    fn read_stdin

    stdin=""
    stdin=`cat`
    bytesread=${#stdin}
    _res=$?

    func "read ${bytesread} bytes from stdin"


    # hard limit: read in max 10MB
    #    sysread -t 10 -c bytesread -s 10000000 stdin
    # case $_res in
    #     1) warning "read_stdin: there was an error in the parameters to the command." ;;
    #     2) warning "read_stdin: there was an error on the read, or on polling the input file descriptor for a timeout." ;;
    #     4) warning "read_stdin: the attempt to read timed out." ;;
    #     5) warning "read_stdin: no system error occurred, but zero bytes were read." ;;
    #     0) return 0 ;;
    # esac
           
}

stdin_is_muttpipe() {
    fn stdin_is_muttpipe
    req=(stdin)
    ckreq || return 1

    if [[ "${stdin[(w)1]}" = "Date:" ]]; then
        return 0
    else
        return 1
    fi
}

stdin_is_pathlist() {
    fn stdin_is_pathlist
    req=(stdin)
    ckreq || return 1

    if [[ -r "${stdin[(w)1]}" ]]; then
        return 0
    else
        return 1
    fi
}

# extract all entries in addressbook or all addresses in a pgp keyring
# or all signatures on a pgp key (even without importing it)
extract_addresses() {
    func "extract_addresses() $PARAM"

    # without arguments just list all entries in the active list
    # default is whitelist

    arg=${1}

    func "extract() arg: $arg (param: $PARAM)"

    # no arg means parse from stdin
    stdin=0
    [[ "$arg" = "" ]]      && stdin=1
    [[ "$arg" = "stdin" ]] && stdin=1
    [[ "$arg" = "in" ]]    && stdin=1
    
    
    [[ $stdin = 1 ]] && { 
        read_stdin

        # Extract all entries found in stdin. Supports two formats (autodetected)
        # 1) list of complete paths to filenames as returned by search
        # 2) mbox format big file with special jaromail separator as produced by mutt tagging

        # take first word
        if stdin_is_muttpipe; then

            act "stdin seems an email or stream of emails"

            _headers=`print - $stdin | awk '
BEGIN { header=1 }
/JAROMAIL_PIPE_SEPARATOR/ { header=1; next }
/^$/ { header=0; print "\n" }
{ if(header==1) { print $0 } }
'`

            e_addr=()
            _nextline=0
            _gotit=""

            for h in ${(f)_headers}; do

                [[ "${h[(w)1]}" = "From:" ]] && _nextline=1
                [[ "${h[(w)1]}" = "Subject:" ]] && {
                    _nextline=0
                    print - ${_gotit} | e_parse

                    _gotit=""
                }
                [[ $_nextline = 1 ]] && _gotit+="$h\n"

            done

            for i in ${(k)e_addr}; do
                print - "${e_addr[$i]} <$i>"
            done


        elif stdin_is_pathlist; then
            act "stdin seems a stream of full paths to single email files inside maildirs"
            # is a list of files
            extract_mails "$2"
            _res=$?
        else
            error "Cannot process stream from stdin, unknown format"
            return 1
        fi
        return $_res
    }

    [[ -r "$arg" ]] && {
        # if first arg is a file, could be a maildir, a gpg keyring,
        # a gpg pubkey or a vcard
        
        # if first arg is a directory then extract from maildir
        [[ -d "$arg" ]] && {
            notice "Extracting $2 addresses from maildir $1"
            extract_maildir "$1" "$2"
            return $?
        }

        func "testing argument with file magic"
        _magic=`file "$arg"`
        _recognized=0

        # a map to eliminate duplicates
        typeset -A result

        ######### GPG
        # first arg is a GnuPG key ring
        [[ "$_magic" =~ "GPG key public ring" ]] && { _recognized=1
            notice "Extracting addresses found in GPG keyring: $arg"
            _addrs=`gpg --list-keys --with-colons | awk -F: '{print $10}'`
            for i in ${(f)_addrs}; do
                [[ $global_quit = 1 ]] && break
                _parsed=`print "From: $i" | ${WORKDIR}/bin/fetchaddr -a -x from`
                _e="${_parsed[(ws:,:)1]:l}"
                isemail "$_e"
                [[ $? = 0 ]] || continue
                # check if the email is not already parsed
                [[ "${result[$_e]}" = "" ]] && {
                    _n="${_parsed[(ws:,:)2]}"
                    result+=("$_e" "$_n")
                    print - "$_n <$_e>"
                }
            done
        }

        # first arg is a GnuPG public key
        [[ "$_magic" =~ "PGP public key" ]] && { _recognized=1
            notice "Extracting addresses from sigs on GPG key $arg"
            _gpg="gpg --no-default-keyring --keyring $MAILDIRS/cache/pubkey.gpg --batch --with-colons"
            ${=rm} $MAILDIRS/cache/pubkey.gpg
            ${=_gpg} --import "$arg"
            # first make sure all unknown keys are imported
            _addrs=`${=_gpg} --list-sigs | awk -F: '{print $5 " " $10}'`
            for i in ${(f)_addrs}; do
                [[ $global_quit = 1 ]] && break

                [[ "$i" =~ "[User ID not found]" ]] && {
                    act "looking up: $i"
o                    ${=_gpg} --recv-key ${i[(w)1]}
                }
            done
            
            _addrs=`${=_gpg} --list-sigs | awk -F: '{print $10}'`
            for i in ${(f)_addrs}; do
                [[ $global_quit = 1 ]] && break

                _parsed=`print "From: $i" | ${WORKDIR}/bin/fetchaddr -a -x from`
                _e="${_parsed[(ws:,:)1]:l}"
                isemail "$_e"
                [[ $? = 0 ]] || continue
                # check if the email is not already parsed
                [[ "${result[$_e]}" = "" ]] && {
                    _n="${_parsed[(ws:,:)2]}"
                    result+=("$_e" "$_n")
                    print - "$_n <$_e>"
                }
            done
        }

        [[ "$_magic" =~ "vCard" ]] && { _recognized=1
            # parse the vcard and print a simple name and email list
            # each value on a single line, entry tuples followed by a #
            # we skip entries that don't have an email
            addresses=`awk '
BEGIN { newcard=0; c=0; name=""; email=""; }
/^BEGIN:VCARD/ { newcard=1 }
/^FN:/ { if(newcard = 1) name=$0 }
/^EMAIL/ { if(newcard = 1) email=$0 }
/^END:VCARD/ {
  if(newcard = 1) {
    newcard=0
    if(email != "") {
      c+=1
      print name
      print email
      print "# " c
    }
    email=""
    next
  }
}
' $arg | cut -d: -f2`
            newa=1; _name=""; _email=""
            for a in ${(f)addresses}; do
                [[ $global_quit = 1 ]] && break
                
                [[ "${a[1]}" = "#" ]] && {
                    newa=1; # its the end of the entry
                    
                    # handle lines with multiple emails in vcard
                    for ee in ${=_email}; do
                        # check if we have this email already
                        _e=`print ${ee//\^M/} | extract_emails`
                        isemail "$_e"
                        [[ $? = 0 ]] || continue
                        # check if the email is not already parsed
                        [[ "${result[$_e]}" = "" ]] && {
                            _n="${_name//\^M/}"
                            result+=("$_e" "$_n")
                            print - "$_n <$_e>"
                        }
                    done
                    
                    continue
                }
                if [[ $newa = 1 ]]; then
                    # (V) makes special chars visible, we need to remove them..
                    _name="${(V)a[(ws:^:)1]}"; newa=0; continue
                elif [[ $newa = 0 ]]; then
                    _email="${(V)a[(ws:^:)1]}"
                fi

            done
            
         }

         [[ $_recognized = 1 ]] && {
             notice "Unique addresses found: ${#result}"
             # act "calculating known and new addresses..."
             # # counts which addresses are known to us
             # _known=0
             # for i in ${(k)result}; do
             #     [[ $global_quit = 1 ]] && break

             #     lookup_email ${i}
             #     [[ $? = 0 ]] || {
             #         _known=$(( $_known + 1 )) }
             # done
             # act "new addresses: $_known"
             return 0
         }

    } # closes condition in which arg is a file

    # final fallback
    # if no file is recognized, use string as search query
    error "cannot extract any address from $PARAM"
    [[ "$_magic" = "" ]] || {
        error "file format not supported: ${_magic[(ws@:@)2]}" }
    return 1
}


extract_headers() {
    fn extract_headers
    # use cat directly, faster than read_stdin
    for i in `cat`; do
        [[ -r "$i" ]] || {
            warning "cannot extract headers, not a file: $i" }
        _folder=${i[(ws:/:)-3]}
        hdr $i | awk -v folder=$_folder '
BEGIN { date=""; from=""; subj="" }
/^From:/ { from=$NF }
/^Date:/ { date=sprintf("%02d %s %s", $3, $4, $5)}
/^Subject:/ { subj=$0}
END { printf("%s :%s:\t%s\t%s\n", date, folder, from, subj) }'
    done
}
