#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2015 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# start without options: auto
# read or compose depending if there is an argument that is an email
# or a folder to start with

# which mutt binary to use
mutt="mutt"

datestamp() { date '+%d%b%y' }

# remote leading and trailing spaces in a string taken from stdin
trim() {
    sed -e 's/^[[:space:]]*//g ; s/[[:space:]]*\$//g'
}

# zmodload zsh/mapfile
printfile() {
    print ${mapfile[$1]}
}

# extract all emails found in a text from stdin
# outputs them one per line
extract_emails() {
awk '{ for (i=1;i<=NF;i++)
     if ( $i ~ /[[:alnum:]]@[[:alnum:]]/ ) {
       gsub(/<|>|,/ , "" , $i); print $i } }'
}

# zmodload zsh/regex
isemail() {
    [[ $1 -regex-match '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b' ]] && return 0
    return 1
}

ismailinglist() {
    _head=`awk '{ print $0 }
/^$/ { exit }'`
    [[ "$_head" =~ "List-Id" ]] \
        || [[ "$_head" =~ "X-BeenThere" ]] \
        || [[ "$_head" =~ "List-Post" ]] \
        || [[ "$_head" =~ "X-Mailman-Version" ]] \
        || [[ "$_head" =~ "Mailing-List" ]] \
        && return 0
    return 1
}

# parses stdin and converts some characters to html
escape_html() {
    sed -e '
s/\&/\&amp;/g
s/>/\&gt;/g
s/</\&lt;/g
s/"/\&quot;/g
'
}

e_parse() {
    _arg=""
    # optional second argument limits parsing to header fields
    [[ "$1" = "" ]] || [[ "$1" = "all" ]] || _arg="-x $1"

    # use RFC822 parser in fetchaddr
    e_parsed=`${WORKDIR}/bin/fetchaddr ${=_arg} -a`

    for _p in ${(f)e_parsed}; do
        _e="${(Q)_p[(ws:,:)1]:l}"
		# this error of parsed '@' occurs sometimes
		[[ "$_e" = "@" ]] && continue
        # check if an email address was found
        isemail "$_e" || continue
        # avoid duplicates
        [[ "${(v)e_addr[$_e]}" = "" ]] || continue

        # extract also the name using comma separator
        _n="${(Q)_p[(ws:,:)2]}"

        e_addr+=("$_e" "$_n")
        func "parsed: $_n <$_e>"
    done

    # no emails found
    [[ ${#e_addr} = 0 ]] && return 1

    return 0
}


# short utility to print only mail headers
hdr() {
   [[ -r "$1" ]] || {
        error "hdr() called on non existing file: $1"
        return 1 }
    awk '{ print $0 }
/^$/ { exit }' "$1"
}

# short utility to print only mail body
body() {
    { test -r "$1" } || {
    error "body() called on non existing file: $1"
    return 1 }
    awk '
BEGIN { head=1 }
/^$/ { head=0 }
{ if(head==0)
    print $0
  else
    next }' "$1"
}

save_replay() {
    fn save_replay
    _cmd="$1"
    req=(_cmd)
    ckreq || return 1

    tee $MAILDIRS/cache/replay.$_cmd
    [[ $? = 0 ]] && \
        ln -sf $MAILDIRS/cache/replay.$_cmd $MAILDIRS/cache/replay.last
    return 0
}

replay() {
    fn "replay $*"

    arg=$1

    if [[ "$arg" = "" ]]; then

        if [[ -r $MAILDIRS/cache/replay.last ]]; then
            notice "Replay last stdout from `stat -c %z $MAILDIRS/cache/replay.last`"
            cat $MAILDIRS/cache/replay.last
            return $?
        else
            # never run a command?
            error "There is nothing to replay"
            return 1
        fi

    elif [[ -r $MAILDIRS/cache/replay.$arg ]]; then
        notice "Replay stdout of command '$arg' from `stat -c %z $MAILDIRS/cache/replay.last`"
        cat $MAILDIRS/cache/replay.$arg
        return $?

    elif [[ "$arg" = "list" ]]; then
        notice "Listing available replays:"
        ls -l $MAILDIRS/cache/replay.*
        return $?
    else
        error "Nothing to replay for command: $arg"
        return 1
    fi
    return 1
}

#########
## Editor
# this part guesses what is the best editor already present on the system
# of course we have a preference for AutOrg, the editor from our suite
# however the default is nano if nothing else is choosen.
jarovim() {
    fn jarovim
    vim -c 'set fo=tcrq' -c 'set tw=72' \
        -c 'map <C-j> {gq}' -c 'imap <C-j> <esc>{gq}i' \
        "${@}"
    return $?
}

edit_file() {
    fn edit_file $*
	_editor=${EDITOR:-vim}
	_editor=${JARO_EDITOR:-$_editor}
    req=(_editor)
    ckreq || return 1

    func "selected editor: $_editor"
    case $_editor in
        # refine settings for email
        vi|vim) jarovim "$*"; return $? ;;
        emacs) emacsclient "$*"; return $? ;;
        *) ${=_editor} "$*"; return $? ;;
    esac

    # if we are here we need to guess
    case $OS in
        MAC) open -t $* ;;
        GNU)
            ps ax|grep '[e]macs' > /dev/null
            if [ $? = 0 ]; then
                emacsclient -a $*
            elif command -v vim > /dev/null; then
                jarovim $*
            elif command -v nano > /dev/null; then
                nano -m -S -Q ">" -I -E -D -T 4 -U -W -c -i -k -r 72 $*
            else
                error "No editor found, please configure the JARO_EDITOR environment variable."
            fi
            ;;
    esac
    return $?
}

##############
## Open a File
preview_file() {
    case $OS in
        GNU)
            xdg-open $*
            ;;
        MAC)
            open -g $*
            ;;
    esac
}


#########################
## check if we are online
is_online() {
    func "Test if we are online"
    { test "$FORCE" = "1" } && {
    act "Internet check skipped (--force in use)"
    return 0
    }
    _res=1
    _host=${1:-8.8.8.8}
    _port=${2:-NONE}

    _mode=inet # or host
    { test "$_port" = "NONE" } || { _mode=host }

    case $_mode in
    inet)
        func "trying to ping ${_host}"
        ping -c1 -n ${_host} 2>&1 > /dev/null
        { test $? = 0 } || {
        error "Internet seems unreachable"
        act "Network connection is checked with a ping to 8.8.8.8"
        act "if your network doesn't allows it to pass, use -f to force."
        error "Operation aborted."
        exit 1
        }
        act "Internet seems to be reachable"
        ;;
    host)
        func "trying to connect ${_host} port ${_port}"
        #busybox nc -w 16 -z ${_host} ${_port} > /dev/null
        nc -w 16 -z ${_host} ${_port} > /dev/null
        { test $? = 0 } || {
        error "Host unreachable: $_host"
        act "Network connection is checked with 16s timeout"
        act "if you want to bypass this check, use -f to force."
        error "Operation aborted."
        return 1
        }
        act "Host $_host responds on port $_port"
        ;;
    esac
    return 0
}


human_size() {
    [[ $1 -gt 0 ]] || {
        error "human_size() called with invalid argument"
        return 1
    }

    # we use the binary operation for speed
    # shift right 10 is divide by 1024

    # gigabytes
    [[ $1 -gt 1073741824 ]] && {
        print -n "$(( $1 >> 30 )) GB"
        return 0
    }

    # megabytes
    [[ $1 -gt 1048576 ]] && {
        print -n "$(( $1 >> 20 )) MB"
        return 0
    }
    # kilobytes
    [[ $1 -gt 1024 ]] && {
        print -n "$(( $1 >> 10 )) KB"
        return 0
    }
    # bytes
    print -n "$1 Bytes"
    return 0
}

######
# CERT
# downloads and/or installs certificates



cert() {

    act "Downloading all known certificates (needs Internet connectivity)"

#	gmail)
    cc=Equifax_Secure_Certificate_Authority
    if ! [ -r $MAILDIRS/certs/${cc}.pem ]; then

    curl -o $MAILDIRS/certs/${cc}.pem \
        "https://www.geotrust.com/resources/root_certificates/certificates/${cc}.cer"
    openssl x509 -in \
        $MAILDIRS/certs/${cc}.pem -fingerprint \
        -subject -issuer -serial -hash -noout
    fi
    notice "Google CA succesfully installed"

#	dyne|autistici|freaknet)
    cc=Autistici_Certificate_Authority
    if ! [ -r $MAILDIRS/certs/${cc}.pem ]; then
    curl -o $MAILDIRS/certs/${cc}.pem \
        "http://ca.autistici.org/ca.pem"
    openssl x509 -in \
        $MAILDIRS/certs/${cc}.pem \
        -fingerprint -subject -issuer -serial -hash -noout
    fi
    notice "Aut/Inv CA succesfully installed"

#	riseup)
    cc=RiseupCA
    if ! [ -r $MAILDIRS/certs/${cc}.pem ]; then
    curl -o $MAILDIRS/certs/${cc}.pem "https://help.riseup.net/assets/43052/RiseupCA.pem"
    openssl x509 -in \
        $MAILDIRS/certs/${cc}.pem \
        -fingerprint -subject -issuer -serial -hash -noout
    fi
    notice "Riseup CA succesfully installed"

    act "refreshing certificates"
    c_rehash $MAILDIRS/certs > /dev/null
    if [ $? != 0 ]; then
    error "Error refreshing certificates in $MAILDIRS/certs"
    c_rehash $MAILDIRS/certs
    fi
    notice "Done importing most common certificates."
    return 0
}
