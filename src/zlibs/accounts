#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2015 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

new_account() {
	fn new_account $*
	acct=$1
	req=(acct)
	ckreq || return 1

	[[ -r $MAILDIRS/Accounts/$acct ]] && {
		error "account already existing: $MAILDIRS/Accounts/$acct"
		return 1 }

	isemail $acct || {
		error "new account is not an email: $acct"
		return 1 }


	name=${acct%%@*}
	domain=${acct##*@}
	local options
	case $domain in
		gmail.com)
			imap=imap.gmail.com
			smtp=smtp.gmail.com
			auth=plain
			cert=check
			options=keep
			;;
		*)
			imap=mail.${domain}
			smtp=mail.${domain}
			auth=plain
			cert=check
			options=keep
			;;
	esac
	cat <<EOF > $MAILDIRS/Accounts/$acct
# automatically generated by 'jaro new' for account: $acct
# modifications will not be overwritten
name $name
email $acct
login $acct
proto imap
host $imap
smtp $smtp
auth $auth
cert $cert
options $options
EOF
	act "account succesfully generated for $acct"
	return 1
}

# -a defines which account name other than 'default'
# results in the definition of global account variables:
# name login host protocol port auth folders accountopt
read_account() {
    typeset -al all
    unset name email imap imap_port smtp smtp_port proto \
        host login transport auth cert options folders exclude
    # parse arguments

    [[ "$account" = "" ]] && account="default"

    # find the account
    func "read_account looking for $account"
    acct="$MAILDIRS/Accounts/$account";
    { test -r "$acct" } || {
        acct="$MAILDIRS/Accounts/$account.txt"
        { test -r "$acct" } || {
            error "no account found: $acct"
            act "Refine your argument using '-a accountname'"
            act "Available accounts:"
            ls "$MAILDIRS/Accounts/"
            return 1
        }
    }

    ttmp=`awk '
	/^my_hdr/ { next }
    /^#/ { next }
    /^name/ { printf "name=\""; for(i=2;i<=NF;i++) printf "%s ", $i; printf "\";" }
    /^email/ { printf "email=\"%s\";", $2 }
	/^proto/ { printf "proto=\"%s\";", $2 }
    /^imap / { printf "imap=\"%s\";", $2 }
    /^smtp / { printf "smtp=\"%s\";", $2 }
    /^host / { printf "host=\"%s\";", $2 }
    /^port / { printf "port=\"%s\";", $2 }
    /^login/ { printf "login=\"%s\";", $2 }
    /^transport/ { printf "transport=\"%s\";", $2 }
    /^certfile/ { printf "certfile=\"%s\";", $2 }
    /^imap_port/ { printf "imap_port=\"%s\";", $2 }
    /^smtp_port/ { printf "smtp_port=\"%s\";", $2 }
    /^auth/ { printf "auth=\"%s\";", $2 }
    /^cert/ { printf "cert=\"%s\";", $2 }
    /^password/ { printf "password=\"%s\";", $2 }
    /^options/ { printf "accountopt=\""; for(i=2;i<=NF;i++) printf "%s ", $i; printf "\";" }
    /^folders/ { printf "folders=("; for(i=2;i<=NF;i++) printf "%s ", $i; printf ");" }
    /^exclude/ { printf "exclude=("; for(i=2;i<=NF;i++) printf "%s ", $i; printf ");" }
    ' "$acct"`
    { test $? = 0 } || {
    error "Error parsing account: $acct"
    return 1 }

    eval "$ttmp"
    # check required fields

    # falling back to old host/port conf directives
    imap=${imap:-$host}
    host=${host:-$imap}

    smtp=${smtp:-$host}
    smtp=${smtp:-$imap}

    imap_port=${imap_port:-$port}
    smtp_port=${smtp_port:-$imap_port}

    # fill in defaults
	proto=${proto:-imap}
    name=${name:-$account}
	login=${login:-$email}
	email=${email:-$login}
	transport=${transport:-TLS1}
	imap_port=${imap_port:-993}
	smtp_port=${smtp_port:-587}
	auth=${auth:-plain}
	cert=${cert:-ignore}
	accountopt=${accountopt:-keep}

	act "account in use: $login"
    func "name: $name"
    func "email: $email"
    func "login: $login"

    func "host: $host"
    func "port: $port"

    func "imap: $imap"
    func "imap port: $imap_port"
    func "smtp: $smtp"
    func "smtp port: $smtp_port"

    func "trans: $transport"
    func "certfile: $certfile"
    func "cert: $cert"
    func "auth: $auth"
    [[ "$password" = "" ]] || func "password: manually set"
    func "options: $accountopt"
    func "folders: $folders"
    func "exclude: $exclude"
	my_hdr=`cat "$acct" | grep '^my_hdr'`
	[[ "$my_hdr" = "" ]] ||
		func "my_hdr:\n$my_hdr"

    return 0
}
