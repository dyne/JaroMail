#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2014 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

run_imap_query() {
    fn run_imap_query
    _trans=${transport:-plain}
    case $_trans in
        SSL*) _trans=ssl ;;
        TLS*) _trans=tls ;;
    esac
    if [ "$_trans" = "plain" ]; then
	    func "running plain imap query via netcat, no encryption"
	    nc ${imap} ${imap_port} -q 10 2>&1
    elif [ "$_trans" = "tls" ]; then
        func "running tls imap query via openssl, encrypted"
	    openssl s_client -quiet -connect ${imap}:${imap_port} 2>&1 
    elif [ "$_trans" = "ssl" ]; then
	    func "running ssl imap query via openssl, encrypted"
	    openssl s_client -starttls imap -quiet -connect ${imap}:${imap_port} 2>&1 
    else
        error "unknown transport \"$_trans\" for a imap query"
    fi
}

check_imap() {
    [[ $name == "" ]] &&  {
	    error "get_imap_info() called with no account loaded"
	    return 1 }
    [[ "$imap" == "" ]] && {
	    error "get_imap_info() called on a non-imap account: $name on $imap"
	return 1 }
}

imap_list_folders() {
    func "imap_list_folders()"
    check_imap && return 1

    query="B00000 CAPABILITY
B00001 LOGIN \"${login}\" \"${password}\"
B00002 LIST \"\" *
B00003 LOGOUT"
    response=`print $query | run_imap_query`
    folders=`print $response | awk '
/^\* LIST/ {  gsub(/"/, "", $5); print $5 }' | tr -d '\r'`
    print $folders
}

imap_get_size() {
    check_imap && return 1

    # skip getting size if Gmail
    # (imap there lacks support for RFC822.SIZE)
    { test "$host" = "imap.gmail.com" } && {
	act "skipping IMAP examination on GMail account"
	return 1 }
    func "Querying size on $imap:$imap_port"

    [[ "$1" == "" ]] && {
	folders=(`imap_list_folders`)
    } || {
	folders=("$1") }

    query="B00000 CAPABILITY
B00001 LOGIN \"${login}\" \"${password}\""

    c=1
    for f in ${folders}; do
	func "folder: $f"
	[[ "$f" == "" ]] && continue
	c=$(( $c + 1 ))

	query="$query
B0000$c SELECT \"${f}\""

	c=$(( $c + 1 ))
        query="$query
B0000$c FETCH 1:* (RFC822.SIZE)"

    done
    c=$(( $c + 1 ))
    query="$query
B0000$c LOGOUT"
    # print $query
    # print "$query" | run_imap_query
    # return 0

    result=(`print "$query" | run_imap_query | awk '
/^\*.*FETCH.*RFC822.SIZE/ { gsub(/\)/, "", $NF); print $NF }' | tr -d '\r'`)

    bytes_total=0
    typeset -A fsizes
    for i in $result; do
	# TODO: list sizes per-folder
	bytes_total=$(( $bytes_total + $i ))
    done
    print $bytes_total
}
