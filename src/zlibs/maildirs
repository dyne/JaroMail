#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2015 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# static global variable formail cache (used by rmdupes)
typeset -h formail_cache


# checks if its a maildir
# returns 0 (success) if yes
# no in all other cases
maildircheck() {
    { test -r "$1" } || {
    error "Maildir not existing: $1"
    return 1 }
    { test -w "$1" } || {
    error "Directory not writable: $1"
    return 1 }
    { test -r "$1/cur" } \
    && { return 0 } # Yes is a maildir
# shortened test to speedup
#	&& { test -r $1/new } \
#	&& { test -r $1/tmp } \
    func "Not a maildir: $1"
    return 1
}

maildirmake() {

    { test -z "$1" } && {
    error "internal error: missing argument for maildirmake"
    return 255 }

    { test -f "$1" } && {
    func "not a maildir, but a file: $1"
    return 254 }

    { test -d "$1/new" } && {
    func "maildir already exists: $1"
    return 0 }

    { test -r "$1" } && {
    func "directory exists, but is not a maildir: $1"
    return 254 }

    func "creating maildir: $1"

    ${=mkdir} ${1}/cur
    ${=mkdir} ${1}/new
    ${=mkdir} ${1}/tmp

    return 0
}


# fills up all maildirs array
list_maildirs() {
    maildirs=`${=find} "$MAILDIRS" -maxdepth 1 -type d`
    for m in ${(f)maildirs}; do
    func "$m"
    { maildircheck "$m" } && {
        # is a maildir
        { test "`${=find} "$m" -type f`" != "" } && {
        # and is not empty
        maildirs+=(`basename "$m"`)
        }
    }
    done
    return ${#maildirs}
}


rmdupes() {

    ## special argument lastlog
    { test "$1" = "lastlog" } && {
    lastdirs=(`maildirs_lastlog`)
    act "Pruning duplicates across ${#lastdirs} destination maildirs:"
    act "${lastdirs}"
    # recursion here
    rmdupes ${=lastdirs}
    notice "Done pruning"
    # all the prioritization above is so that duplicates are spotted
    # across different maildirs and deleted from the filtered source
    return 0
    }
    ###############

    tot=0
    typeset -al msgs

    formail_cache="$TMPDIR/filter.rmdupes.$datestamp.$RANDOM"
    newlock "$formail_cache"

    for folder in ${=@}; do
    { test -r "$folder" } || { folder="$MAILDIRS/$folder" }
    { test -r "$folder" } || {
        error "Directory not found: $folder"
        continue }

    { maildircheck "${folder}" } || {
        error "Not a maildir folder: $folder"
        continue }

    c=0
    notice "Checking for duplicates in $folder"
    msgs=`${=find} "${folder}" -maxdepth 2 -type f`
    act "Please wait, this can take a while..."



    for m in ${(f)msgs}; do
        func "formail < $m"
        # 128MB should be enough ehre?
        formail -D 128000000  "$formail_cache" <"$m" \
        && rm "$m" && c=$(( $c + 1 ))
    done
    act "$c duplicates found and deleted"
    tot=$(( $tot + $c ))
    done

    unlink "$formail_cache"

    if [ "$tot" = "0" ]; then
    act "No duplicates found at all"
    else
    act "$tot total duplicates found and deleted"
    fi
}

merge() {
    src=${1}
    dst=${2}

    { test "$src" = "$dst" } && {
    error "Cannot merge same directory in itself: $src = $dst"
    return 1 }

    { maildircheck "$src" } || {
    error "Source is not a maildir: $src"
    return 1 }

    { maildircheck "$dst" } || {
    error "Destination is not a maildir: $dst"
    return 1 }

    # merge does not uses deliver() because
    # the new-flag and read-flags must be kept intact.
    # it will abort on any single error on moving each file.
    notice "Merging maildir ${src} into ${dst}"
    c=0
    fr=`${=find} ${src}/cur -type f`

    # TODO: preserve timestamps using cp hardlinks
    #     cp -p -r -l source/date target/
    #     rm -rf source/data
    for i in ${(f)fr}; do
    mv "$i" "${dst}/cur/"; c=$(($c + 1))
    { test $? = 0 } || {
        error "error moving file: $i"
        error "merge aborted."
        return 1 }
    done
    fr=`${=find} ${src}/new -type f`
    for i in ${(f)fr}; do
    mv "$i" "${dst}/new/"; c=$(($c + 1))
    { test $? = 0 } || {
        error "error moving file: $i"
        error "merge aborted."
        return 1 }
    done
    fr=`${=find} ${src}/tmp -type f`
    for i in ${(f)fr}; do
    mv "$i" "${dst}/tmp/"; c=$(($c + 1))
    { test $? = 0 } || {
        error "error moving file: $i"
        error "merge aborted."
        return 1 }
    done
    notice "$c mails succesfully moved"

    act "Removing source directory ${src}"
    ${=rm} -r "${src}"

    act "Purging duplicates in destination"
    rmdupes "${dst}"

    act "Done. All mails merged into ${dst}"
}


# LDA delivery to a maildir
# important to return 1 on all errors
# so that fetchmail does not deletes mail from server
deliver() {
    if [ "$1" = "" ]; then
        dest="incoming"
    else
        dest="$1"
    fi
    
    # create destination maildir if not existing
    [[ -r "$MAILDIRS/$dest" ]] || {
        act "creating destination maildir: $dest"
        maildirmake "$MAILDIRS/$dest"
    }

    maildircheck "$MAILDIRS/$dest"
    [[ $? = 0 ]] || {
        error "Invalid maildir destination for delivery, operation aborted."
        func "Returning error to caller."
        return 1
    }

    func "deliver to $dest"
    
    # destinations excluded from notmuch indexing
    [[ "$dest" = "outbox" ]] \
        || [[ "$dest" =~ "^zz." ]] \
        || [[ "$dest" = "incoming" ]] && {

        base="`hostname`_jaro_`date +%Y-%m-%d_%H-%M-%S`_$RANDOM"        
        
        cat > "$MAILDIRS/$dest/new/$base"
        [[ $? = 0 ]] || {
            error "Could not write email file into maildir $dest."
            func "Returning error to caller."
            return 1
        }
        return 0
    }

    #########
    # notmuch indexing from here

    # tag +inbox
    [[ "$dest" = "known" ]] \
        || [[ "$dest" = "sent" ]] && {
        cat | nm insert --folder="$dest" +inbox +priv
        return $?
    }

    [[ "$dest" = "priv" ]] && {
        cat | nm insert --folder="$dest" +priv
        return $?
    }
    
    # tag +unsorted
    [[ "$dest" = "unsorted" ]] \
        || [[ "$dest" =~ "^lists." ]] && {
        cat | nm insert --folder="$dest" +unsorted
        return $?
    }

    _email=`cat`
    print "$_email" | ismailinglist
    [[ $? = 0 ]] && {
        print "$_email" | nm insert --folder="$dest" +filters +mailinglist
        return $?
    }

    # anything else +filters
    print "$_email" | nm insert --folder="$dest" +filters
    return $?
}
