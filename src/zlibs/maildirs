#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2014 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# static global variable formail cache (used by rmdupes)
typeset -h formail_cache


# checks if its a maildir
# returns 0 (success) if yes
# no in all other cases
maildircheck() {
    { test -r "$1" } || {
    error "Maildir not existing: $1"
    return 1 }
    { test -w "$1" } || {
    error "Directory not writable: $1"
    return 1 }
    { test -r "$1/cur" } \
    && { return 0 } # Yes is a maildir
# shortened test to speedup
#	&& { test -r $1/new } \
#	&& { test -r $1/tmp } \
    func "Not a maildir: $1"
    return 1
}

maildirmake() {

    { test -z "$1" } && {
    error "internal error: missing argument for maildirmake"
    return 255 }

    { test -f "$1" } && {
    func "not a maildir, but a file: $1"
    return 254 }

    { test -d "$1/new" } && {
    func "maildir already exists: $1"
    return 0 }

    { test -r "$1" } && {
    func "directory exists, but is not a maildir: $1"
    return 254 }

    func "creating maildir: $1"

    ${=mkdir} ${1}/cur
    ${=mkdir} ${1}/new
    ${=mkdir} ${1}/tmp

    return 0
}


# fills up all maildirs array
list_maildirs() {
    maildirs=`${=find} "$MAILDIRS" -maxdepth 1 -type d`
    for m in ${(f)maildirs}; do
    func "$m"
    { maildircheck "$m" } && {
        # is a maildir
        { test "`${=find} "$m" -type f`" != "" } && {
        # and is not empty
        maildirs+=(`basename "$m"`)
        }
    }
    done
    return ${#maildirs}
}

maildirs_lastlog() {
    # returns an array of destinations maildirs touched by the last filtering operation
    # based on the procmail log format
    typeset -alU dests prio lasts
    _folders=`cat "${MAILDIRS}/logs/procmail.log"|awk '/Folder:/ {print $2}' | cut -d/ -f1`
    for d in ${(f)_folders}; do
    func "maildir touched by last operation: $d"
    # skip procmail glitch
    { test "$d" = "procmail" } && { continue }
    # put filtered to last
    [[ ${PARAM} == *${d}* ]] && { lasts=($lasts $d); continue }
    # always give priority to known, then to priv, then the rest
    { test "$d" = "known" } && { prio=(known $prio); continue }
    { test "$d" = "priv" } && { prio=($prio priv); continue }
    # skip zz. trash
    [[ $d == zz.* ]] && { continue }
    # put them to filter
        dests+=($d)
    done
    print "${=prio} ${=dests} ${=lasts}"
    unset dests
    unset prio
    unset lasts
}

rmdupes() {

    ## special argument lastlog
    { test "$1" = "lastlog" } && {
    lastdirs=(`maildirs_lastlog`)
    act "Pruning duplicates across ${#lastdirs} destination maildirs:"
    act "${lastdirs}"
    # recursion here
    rmdupes ${=lastdirs}
    notice "Done pruning"
    # all the prioritization above is so that duplicates are spotted
    # across different maildirs and deleted from the filtered source
    return 0
    }
    ###############

    tot=0
    typeset -al msgs

    formail_cache="$TMPDIR/filter.rmdupes.$datestamp.$RANDOM"
    newlock "$formail_cache"

    for folder in ${=@}; do
    { test -r "$folder" } || { folder="$MAILDIRS/$folder" }
    { test -r "$folder" } || {
        error "Directory not found: $folder"
        continue }

    { maildircheck "${folder}" } || {
        error "Not a maildir folder: $folder"
        continue }

    c=0
    notice "Checking for duplicates in $folder"
    msgs=`${=find} "${folder}" -maxdepth 2 -type f`
    act "Please wait, this can take a while..."



    for m in ${(f)msgs}; do
        func "formail < $m"
        # 128MB should be enough ehre?
        formail -D 128000000  "$formail_cache" <"$m" \
        && rm "$m" && c=$(( $c + 1 ))
    done
    act "$c duplicates found and deleted"
    tot=$(( $tot + $c ))
    done

    unlink "$formail_cache"

    if [ "$tot" = "0" ]; then
    act "No duplicates found at all"
    else
    act "$tot total duplicates found and deleted"
    fi
}

merge() {
    src=${1}
    dst=${2}

    { test "$src" = "$dst" } && {
    error "Cannot merge same directory in itself: $src = $dst"
    return 1 }

    { maildircheck "$src" } || {
    error "Source is not a maildir: $src"
    return 1 }

    { maildircheck "$dst" } || {
    error "Destination is not a maildir: $dst"
    return 1 }

    # merge does not uses deliver() because
    # the new-flag and read-flags must be kept intact.
    # it will abort on any single error on moving each file.
    notice "Merging maildir ${src} into ${dst}"
    c=0
    fr=`${=find} ${src}/cur -type f`

    # TODO: preserve timestamps using cp hardlinks
    #     cp -p -r -l source/date target/
    #     rm -rf source/data
    for i in ${(f)fr}; do
    mv "$i" "${dst}/cur/"; c=$(($c + 1))
    { test $? = 0 } || {
        error "error moving file: $i"
        error "merge aborted."
        return 1 }
    done
    fr=`${=find} ${src}/new -type f`
    for i in ${(f)fr}; do
    mv "$i" "${dst}/new/"; c=$(($c + 1))
    { test $? = 0 } || {
        error "error moving file: $i"
        error "merge aborted."
        return 1 }
    done
    fr=`${=find} ${src}/tmp -type f`
    for i in ${(f)fr}; do
    mv "$i" "${dst}/tmp/"; c=$(($c + 1))
    { test $? = 0 } || {
        error "error moving file: $i"
        error "merge aborted."
        return 1 }
    done
    notice "$c mails succesfully moved"

    act "Removing source directory ${src}"
    ${=rm} -r "${src}"

    act "Purging duplicates in destination"
    rmdupes "${dst}"

    act "Done. All mails merged into ${dst}"
}


# very simple LDA delivery to a maildir
# the delicate part is returning all errors
# so that fetchmail does not deletes mail from server
deliver() {
    if [ "$1" = "" ]; then
    dest="$MAILDIRS/incoming"
    else
    dest="$MAILDIRS/$1"
    { test -d "$dest" } || { dest="$1"
        { test -d "$dest" } || {
        error "delivery destination path invalid: $1"
        return 1; } }
    fi

    # create destination maildir if not existing
    [[ -r "$dest" ]] || {
        act "creating destination maildir: $dest"
        maildirmake "$dest" }

    maildircheck "$dest"
    [[ $? = 0 ]] || {
        error "Invalid maildir destination for delivery, operation aborted."
        func "Returning error to caller."
        return 1; }

    base="`hostname`_jaro_`date +%Y-%m-%d_%H-%M-%S`_$RANDOM"

    cat > "$dest/new/$base"
    [[ $? = 0 ]] || {
        error "Could not write email file into maildir, operation aborted."
        func "Returning error to caller."
    return 1; }


    [[ $DEBUG = 0 ]] || {
        func "Delivery successful, log: $MAILDIRS/logs/jaro-deliver.log"
        awk '
BEGIN { print "Delivery to maildir: '"$1"'" }
{ print $0 }
/^$/ { exit }
' "$MAILDIRS/$1/new/$base" >> "$MAILDIRS/logs/jaro-deliver.log"
    }

    return 0
}

# extract and list all recipients in a maildir
md_extract() {
    func "md_extract()"
    _action="$1"
    case $_action in
        all) ;;
        recipient) ;;
        sender) ;;
        *) error "unknown extract action: $_action"; return 1 ;;
    esac

    maildircheck "$2"
    [[ $? = 0 ]] || {
        error "Cannot extract $_action from maildir: $2"
        return 1 }
    _mails=`find $2 -type f`
    # TODO ismail() to check if file is a mail

    # we switch dryrun temporarily off to use learn()
    # without modifying the addressbook
    _dryrun=$DRYRUN
    DRYRUN=1

    notice "Extracting and listing $_action in maildir: $2"
    act "please wait while scanning ${#_mails} mail files..."
    typeset -a learned

    for i in ${(f)_mails}; do
        _l=`hdr $i | learn $_action`
        # handles results on multiple lines (recipients, all)
        for i in ${(f)_l}; do
            learned+=("$i")
        done
    done

    DRYRUN=$_dryrun

    # eliminates duplicates
    typeset -A result
    for i in ${learned}; do
        _e=${i[(ws:,:)1]}
        [[ "${result[$_e]}" = "" ]] && {
            _n=${i[(ws:,:)2]}
            result+=("$_e" "$_n")
            print "$_n <$_e>"
        }
    done
    notice "Unique $_action found: ${#result}"

    # counts which addresses are known to us
    _known=0
    for i in ${(k)result}; do
        lookup="`lookup_email ${i}`"
        [[ "$lookup" = "" ]] || {
            _known=$(( $_known + 1 )) }
    done
    act "addresses known: $_known"
}
