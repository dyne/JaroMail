#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2015 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


lock() {
    fn "lock $@"
    _file=$1
    req=(_file)
    freq=($_file)
    ckreq || return 1

    if helper.isfound dotlock; then
        dotlock=`command -v dotlock`
    else
        dotlock="${WORKDIR}/bin/dotlock"
    fi

    ${dotlock} "$_file"
    res=$?
    case $res in
	1) error "Cannot lock non existing file: $_file"
	    return 1 ;;
	3) error "Locked file in use: $_file"

	    pidcheck "$1"
	    return 3 ;;

	5) error "Lock is impossible on: $_file"
	    return 5 ;;
	# success
	0) print "$$" > "$_file.pid"
	    return 0 ;;

	*) error "Unknown error locking: $res"
	    return 1 ;;
    esac
}

newlock() { # lock file, create if not existing
    fn "newlock $@"
    _file="$1"
    req=(_file)
    ckreq || return 1

    touch "$_file"
    chmod 600 "$_file"
    lock "$_file"
}

pidcheck() { # check if lock belongs to us
    fn "pidcheck $@"
    _pid="$1"
    req=(_pid)
    ckreq || return 1

    if [ -r "${_pid}.pid" ]; then
        
	lockpid="`cat ${_pid}.pid`"
	func "pidcheck: $lockpid"
	if [[ "$$" = "$lockpid" ]]; then
	    func "${_pid} lock belongs to us"
	else
            
	    error "Unlock attempt by multiple processes on `basename $_pid`"
	    [[ "$FORCE" = "1" ]] || {
                _prun=1
		while [ "$_prun" = "1" ]; do
                    [[ $global_quit = 1 ]] && { break }
		    for p in `ps ax | awk '{ print $_pid }'`; do
			{ test "$p" = "$lockpid" } && { break }
		    done
		    if [ "$p" = "$lockpid" ]; then
			act "Owner (${lockpid}) still running, waiting release..."
			sleep 1; 
                        continue
		    else
			act "Owner (${lockpid}) not running, taking over the lock"
			rm -f "${_pid}.pid"; print "$$" > "${_pid}.pid"
			_prun=0
		    fi
		done
	    }
	    act "left behind by $lockpid - we ($$) will take over"
            
	fi
        
    else # pid file doesn't exists
	func "no pid file found for: $_pid"
	func "we will take it over"
	print "$$" > "${_pid}.pid"
    fi
    return 0
}

unlock() {
    fn "unlock $@"
    _file="$1"
    req=(_file)
    ckreq || return 1
    
    pidcheck "$_file"
    [[ $? = 0 ]] || { return 1 }
    
    ${WORKDIR}/bin/dotlock -u "$_file"
    [[ $? = 0 ]] || {
	    rm -f "${_file}.lock"
	    [[ $? = 0 ]] || { error "Unable to unlock: $_file"; return 1 }
    }
    [[ -r "${_file}.pid" ]] && { rm -f "${_file}.pid" }
    return 0
}

unlink() { # delete a file that we are locking
    fn "unlink $@"
    _file="$1"
    ckreq || return 1

    unlock "$_file"
    ${=rm} "$_file"
    func "$_file removed"
}
