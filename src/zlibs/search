#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2014 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#######################
## Search into maildirs
# using mairix
search() {
    # check if the name of a maildir is among params
    # we need at least 2 maildirs, the second is the destination
    typeset -al fold
    typeset -al term
    # intelligent parse of args, position independent
    # check if its a folder, if not is an expression
    for p in ${PARAM}; do
	if [ -r ${p} ]; then
	    { maildircheck ${p} } && {
		func "param ${p} is a maildir"
		fold+=(${p}) }
	elif  [ -r "${MAILDIRS}/${p}" ]; then
	    { maildircheck ${MAILDIRS}/${p} } && {
		func "param ${p} is a jaro maildir"
		fold+=(${MAILDIRS}/${p}) }
	else
	    func "param ${p} is a search term"
	    term+=(${p})
	fi
    done
    # now fold is an array of specified folders
    # term is an array of specified search expressions

    { test "${#term}" = "0" } && {
	error "No search terms specified."
	act "Parameters: ${PARAM}"
	return 1
    }

    # no folders specified, search into the addressbook
    { test "${#fold}" = "0" } && {
	typeset -alU results
	notice "Searching addressbook for: ${PARAM}"
	res=""

	for t in ${term}; do
	    res+=`search_addressbook ${t}`
	done

	for rr in ${(f)res}; do
	    _email=`print $rr | awk '{ print $1 }'`
	    _name=`print $rr | awk '{ for(c=2;c<=NF;c++) printf "%s ", $c }'`
	    results+=("$_name <$_email>")
	done

	{ test "${#results}" = "0" } || {
	    act "${#results} matches found:"
	    for i in ${results}; do
		print "$i"; done
	    return 0
	}
	notice "No matches found."
	return 1
    }
    
    # base path is the dir of the first folder
    pushd `dirname ${fold[1]}`
    basedir=`pwd`
    popd

    notice "Searching ${#fold} folders in $basedir for: ${term}"
    { command -v mairix > /dev/null } || {
	error "Mairix not found, operation aborted."
	return 1 }
    act "Searching through: ${fold}"
    act "Please wait..."
    id=$datestamp.$RANDOM
    rc=$TMPDIR/search.conf.$id
    # forge the folder string for mairix conf
    folders=""; for f in ${fold}; do folders="$folders`basename $f`:"; done
    cat <<EOF > $rc
base=$basedir
database=$TMPDIR/search.db.$id
maildir=${folders}
mfolder=$TMPDIR/search.result.$id
mformat=maildir
EOF
    { test $DEBUG = 1 } && {
	func "Mairix conf (debug output)"
	cat $rc }

    exitcode=0
    { test "$DRYRUN" = "1" } || {
	exitcode=1
	mairix -F -f $rc 2>/dev/null
	{ test $? = 0 } && {
	    found=`mairix -F -f $rc ${=term} 2> /dev/null | awk '{ print $2}'`
	    if [ "$found" = "0" ]; then
		error "No matches found."
	    else
		${=mutt} -F $MUTTDIR/rc -R -f $TMPDIR/search.result.$id
		notice "Found $found matches looking for '$term' in $folders"
		exitcode=0
	    fi
	}
    } # DRYRUN
    ${=rm} $TMPDIR/search.db.$id
    ${=rm} $TMPDIR/search.conf.$id
    ${=rm} -r $TMPDIR/search.result.$id
    return $exitcode
}

backup() {
    id=$datestamp.$RANDOM
    mairixrc=$TMPDIR/backup.rc.$id
    mairixdb=$TMPDIR/backup.db.$id
    typeset -al expr
    typeset -al fold

    src=""; dst=""
    basedir=$MAILDIRS
    # check if the name of a maildir is among params
    # we need at least 2 maildirs, the second is the destination
    for p in ${PARAM}; do
	c=$(( $c + 1 ))

	if [ $c = ${#PARAM} ]; then
	    # last one is always the destination
	    func "destination is ${p}"
	    fold+=(${p})

	elif [ -r "${p}" ]; then

	    { maildircheck ${p} } && {
		func "param ${p} is a maildir"
		fold+=(${p})
		{ test ${#fold} = 1 } && {
		    # base path is the dir of the first folder
		    pushd `dirname ${p}`
		    basedir=`pwd`
		    popd }
	    }

	elif [ -r "${MAILDIRS}/${p}" ]; then

	    { maildircheck ${MAILDIRS}/${p} } && {
		func "param ${p} is a jaro maildir"
		fold+=(${MAILDIRS}/${p})
	    }

	else # not a folder, add it to expressions array
	    func "param ${p} is an expression"
	    expr+=(${p})
	fi
    done

    { test ${#fold} -lt 2 } && {
	error "Not enough folders specified for backup: minimum is 2"
	act "When specifying more than 2, the last one is the destination"
	return 1
    }

    dst=${fold[${#fold}]}
    { test -r "$dst" } || { maildirmake "${dst}" }

    { test ${#expr} = 0 } && {
	error "No expression set for backup, please indicate what you want to backup"
	act "For example: d:10y-2y (all mails older than 1 year up to 10 years ago)"
	act "Or a simple search string, all expressions can be verified using search."
	return 1
    }

    # forge the folder string for mairix conf
    folders=""
    for f in ${=fold}; do
	{ test $f = $dst } || {
	    folders="$folders`basename $f`:" }
    done

    notice "Backup of all mails in '$folders' matching expression '$expr'"

    act "Indexing folders"
    cat <<EOF > ${mairixrc}
base=$basedir
database=$mairixdb
maildir=${folders}
mformat=maildir
EOF
    mairix -F -f ${mairixrc} 2> /dev/null
    tempdst="bck.`basename $dst`"
    notice "Backup of $dst"
    rm -f ${mairixrc}; cat <<EOF > ${mairixrc}
base=$basedir
database=$mairixdb
maildir=${folders}
mfolder=$tempdst
mformat=maildir
EOF
    mairix -F -f ${mairixrc} -t -M ${expr}
    { test -r $basedir/$tempdst } && { 
      merge $basedir/$tempdst $dst
      notice "Destination folder size is `du -hs $dst | awk '{print $1}'`"
    }

    ${=rm} ${mairixrc}
    ${=rm} ${mairixdb}

    act "Backup completed to destination: $dst"
}
