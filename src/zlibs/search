#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2015 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#######################
## Search into maildirs
# using notmuch

nm_dir="$MAILDIRS"/cache/notmuch

nm_setup() {
    mkdir -p "$nm_dir"

    # read if there are other email aliases configured
    [[ -r "$MAILDIRS"/Aliases.txt ]] && {
        other_email="other_email"
        _aliases=`cat "$MAILDIRS"/Aliases.txt`
        _sep=\=
        for i in ${(f)_aliases}; do
            other_email+="${_sep}${i}"
            _sep=";"
        done
    }

    rm -f "$nm_dir"/rc
    cat <<EOF > "$nm_dir"/rc
[database]
path=$MAILDIRS

[user]
name=$name
primary_email=$email
$other_email

[new]
tags=unread
ignore=zz.;log;cache;Accounts;Groups;.mutt;webnomad;.abook;.txt;.pdf;.html;.png;.js

[maildir]
synchronize_flags=true
EOF
}

nm_index() {
    read_account
    nm_setup
    func "notmuch --config=${nm_dir}/rc new"

    notmuch --config="${nm_dir}/rc" new
}

nm_search() {
    read_account
    nm_setup
    
    notice "Searching emails for: $=PARAM"
    local search_results
    func "notmuch --config=${nm_dir}/rc search --output=files ${=PARAM}"

    # launch the search with notmuch
    search_results=`notmuch --config="${nm_dir}/rc" search --output=files ${=PARAM}`
    act "`print ${search_results} | wc -l` results found"
    [[ $? = 0 ]] || {
        error "notmuch search failed with an error"
        return 1 }

    # populate the maildir with results
    _resdir="${nm_dir}/results"
    func "notmuch results in $_resdir"
    rm -rf "$_resdir"
    act "populating a maildir with results"
    maildirmake $_resdir
    for i in ${(f)search_results}; do
        ln -s $i "$_resdir/new/`basename $i`"
    done
}

search() {
    
    [[ "$PARAM" = "" ]] && {
	    error "No search terms specified."
	    return 1
    }
    
    typeset -al term
	typeset -alU results
    
    for p in ${PARAM}; do
        func "param ${p} is a search term"
        term+=(${p})
    done
    
    [[ "$PARAM" =~ "addr" ]] && {
        # if addr specified search into the addressbook
	    notice "Searching addressbook for: ${PARAM//addr/}"
	    res=""
	    for t in ${term}; do
            [[ "$t" =~ "addr" ]] && continue
            # res+=`search_addressbook ${t}`
	        search_addressbook ${t} | awk '
/^$/ { next }
{ for(c=2;c<=NF;c++) printf "%s ", $c
  print "<" $1 ">" }'
	    done
        return 0
    }
    
    # run search across emails
    nm_search ${=PARAM}
    
    # open the results maildir
    ${=mutt} -F "$MUTTDIR"/rc ${=muttflags} \
        -f "$MAILDIRS"/cache/notmuch/results
    
}

backup() {
    id=$datestamp.$RANDOM
    mairixrc=$TMPDIR/backup.rc.$id
    mairixdb=$TMPDIR/backup.db.$id
    typeset -al expr
    typeset -al fold

    src=""; dst=""
    basedir=$MAILDIRS
    # check if the name of a maildir is among params
    # we need at least 2 maildirs, the second is the destination
    for p in ${PARAM}; do
	c=$(( $c + 1 ))

	if [ $c = ${#PARAM} ]; then
	    # last one is always the destination
	    func "destination is ${p}"
	    fold+=(${p})

	elif [ -r "${p}" ]; then

	    { maildircheck ${p} } && {
		func "param ${p} is a maildir"
		fold+=(${p})
		{ test ${#fold} = 1 } && {
		    # base path is the dir of the first folder
		    pushd `dirname ${p}`
		    basedir=`pwd`
		    popd }
	    }

	elif [ -r "${MAILDIRS}/${p}" ]; then

	    { maildircheck ${MAILDIRS}/${p} } && {
		func "param ${p} is a jaro maildir"
		fold+=(${MAILDIRS}/${p})
	    }

	else # not a folder, add it to expressions array
	    func "param ${p} is an expression"
	    expr+=(${p})
	fi
    done

    { test ${#fold} -lt 2 } && {
	error "Not enough folders specified for backup: minimum is 2"
	act "When specifying more than 2, the last one is the destination"
	return 1
    }

    dst=${fold[${#fold}]}
    { test -r "$dst" } || { maildirmake "${dst}" }

    { test ${#expr} = 0 } && {
	error "No expression set for backup, please indicate what you want to backup"
	act "For example: d:10y-2y (all mails older than 1 year up to 10 years ago)"
	act "Or a simple search string, all expressions can be verified using search."
	return 1
    }

    # forge the folder string for mairix conf
    folders=""
    for f in ${=fold}; do
	{ test $f = $dst } || {
	    folders="$folders`basename $f`:" }
    done

    notice "Backup of all mails in '$folders' matching expression '$expr'"

    act "Indexing folders"
    cat <<EOF > ${mairixrc}
base=$basedir
database=$mairixdb
maildir=${folders}
mformat=maildir
EOF
    mairix -F -f ${mairixrc} 2> /dev/null
    tempdst="bck.`basename $dst`"
    notice "Backup of $dst"
    rm -f ${mairixrc}; cat <<EOF > ${mairixrc}
base=$basedir
database=$mairixdb
maildir=${folders}
mfolder=$tempdst
mformat=maildir
EOF
    mairix -F -f ${mairixrc} -t -M ${expr}
    { test -r $basedir/$tempdst } && { 
      merge $basedir/$tempdst $dst
      notice "Destination folder size is `du -hs $dst | awk '{print $1}'`"
    }

    ${=rm} ${mairixrc}
    ${=rm} ${mairixdb}

    act "Backup completed to destination: $dst"
}
