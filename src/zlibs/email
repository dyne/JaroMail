#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2015 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# extract all emails found in stdin, one per line
stdin_compose() {
    fn stdin_compose $*

    # among the args parse recipient emails and files to attach
    _files=()
    _addrs=()
    for p in $*; do
		func "$p"
        if [[ -r $p ]]; then
            func "attach: $p"
            _files+=(-a $p)
        elif isemail $p; then
            func "recipient: $p"
            _addrs+=($p)
        else
            warning "skipping arg: $p"
        fi
    done

    # take as subject the first line of body
    ztmp; body=$ztmpfile
    if command -v rlwrap >/dev/null; then
		rlwrap -c --multi-line -D2 -b '<>' -I -e '' cat > $body
    else
        cat > $body
    fi
    subject=`head -n1 $body`

    [[ "$subject" = "" ]] && {
        error "Nothing read from input, not even the subject"
        return 1 }
    notice "Sending mail from commandline"
    act "recipients: ${_addrs}"
    [[ "$_files" = "" ]] || act "attachments: ${_files}"
    act "subject: $subject"
	read_account ${account}
    cat <<EOF | x_mutt -s "${subject// /_}" -i $ztmpfile ${=_files} -- ${=_addrs}
EOF
    # _mutt -H <(print "To: ${option_params}")
    return $?
}


stdin_queue() {
    fn stdin_queue $*

    local base;

    notice "Adding mail to the outbox queue"
    base="`hostname`-queue-`date +%Y-%m-%d-%H.%M.%S`"

    queue_to=($*)
    # set it ready for saving in outbux
    queue_body="$base"

    ztmp
    tmpqueue=$ztmpfile

    # pre-processing of the email headers
    awk '
/User-Agent:/ { print "User-Agent: Jaro Mail <https://www.dyne.org/software/jaromail>"; next }
{ print $0 }
' > "$tmpqueue"
    [[ $? = 0 ]] || { error "Error queing email from stdin into outbox"; return 1 }

    # calculate the sha1sum of the body to check integrity of delivery
    _sha1sum=`body $ztmpfile | sha1sum -t`
    _sha1sum=${_sha1sum[(w)1]}
    func "Body SHA1 checksum: $_sha1sum"

    maildirmake "$MAILDIRS/outbox"
    # ${=mkdir} "$MAILDIRS/outbox/send"
    lock "$MAILDIRS/outbox"

    # check if recipients are a Group
    if [[ "${=queue_to}" =~ '@jaromail.group' ]]; then

        groupfile="`print ${=queue_to}|cut -d@ -f1`"
        act "email recipients are in group ${groupfile}"

        [[ -r "$MAILDIRS/Groups/$groupfile" ]] || {
            maildirmake "$MAILDIRS/postponed"
            mv "$tmpqueue" "$MAILDIRS/postponed/new"
            unlock "$MAILDIRS/outbox"
            error "Group not found: $groupfile"
            return 1 }

        recipients=`grep -v '^#' $MAILDIRS/Groups/$groupfile`
        groupnum=`grep -v '^#' $MAILDIRS/Groups/$groupfile | wc -l`
        groupmode=`head -n1 "$MAILDIRS/Groups/$groupfile" | awk '/^#mode/ { print $2 } { next }'`
        [[ "$groupmode" = "" ]] && { groupmode="individual" }
        act "$groupnum recipients in total, sending mode $groupmode"

        case $groupmode in

            # individual group mode hides other recipients and send
            # multiple mail envelopes with each single recipient in To:
            individual)
                for i in ${(f)recipients}; do
                    ig=${base}-${RANDOM}
                    cat "$tmpqueue" | \
                        awk '/^To:/ { print "'"To: $i"'"; next } { print $0 }' \
                        | deliver outbox # > "${MAILDIRS}/outbox/new/${ig}.mail"
                done
                ;;

            # carboncopy group mode sends a single envelope where all
            # recipients can see and reply to each other
            carboncopy|cc)
                cc=""
                for i in ${(f)recipients}; do
                    if [ "$cc" = "" ]; then cc="$i"
                    else cc+=", $i"; fi
                done
                ig=${base}-${RANDOM}
                cat "$tmpqueue" | \
                    awk '/^To:/ { print "'"To: $cc"'"; print "'"Reply-To: $cc"'"; next }
                { print $0 }' \
                    | deliver outbox # "${MAILDIRS}/outbox/new/${ig}.mail"
                ;;
        esac

    else
        # recipients are set in the email envelope
        cat "$tmpqueue" | deliver outbox
    fi

    unlock "$MAILDIRS/outbox"

    _sha1sum_delivered=`body $last_deliver | sha1sum -t`
    _sha1sum_delivered=${_sha1sum_delivered[(w)1]}
    func "Delivered body SHA1 checksum: $_sha1sum_delivered"
    if [[ "$_sha1sum_delivered" = "$_sha1sum" ]]; then
        func "correct delivery, SHA1 checksum on body match"
        return 0
    fi

    error "Error on delivery, file checksum don't match"
    [[ $DEBUG = 1 ]] && {
        func "Differences:"
        diff $tmpqueue $last_deliver
        func "-----"
    }
    rm -f $last_deliver
    return 1

}

###########
# FETCHMAIL
fetchall() {
    fn fetchall

    notice "Fetching all accounts in $MAILDIRS"
    res=0
    accts=`${=find} $MAILDIRS/Accounts -type f | grep -v README`
    notice "Fetching mail for all accounts: `print ${accts} | wc -l` found"
    for i in ${(f)accts}; do
        account=`basename $i`
        fetch
        if [ $? != 0 ]; then res=1; fi
        # returns an error if just one of the accounts did
    done
    return $res
}

fetch() {
    fn fetch $*

    [[ "$account" = "" ]] && {
        fetchall; return $? }

    # setup global account variables
    read_account ${account}
    # name login host protocol port auth folders accountopt
    [[  $? = 0 ]] || {
        error "Invalid account: $account"
        return 1
    }

    # updates the notmuch configuration
    nm_setup unread
    # setup :unread: as default tag

    notice "Fetching email for account ${account}"

    is_online ${imap} ${imap_port}
    [[ $? = 0 ]] || { return 1 }

    type=imap
    host=$imap
    port=$imap_port
    [[ "$password" = "" ]] && {
        ask_password
        [[ $? = 0 ]] || {
            error "Impossible to fetch email for account ${account}";
            return 1 }
    }

    # this puts total size in $imap_info
    # experimental only, commented out for now
    # get_imap_info

    # return here if the imap folders are all empty
    # { test ${imap_info[${#imap_info}]} = 0 } && {
    #	act "Mailbox is empty, nothing to fetch."
    #	return 0 }

    # notice "Total occupation is `human_size ${imap_info[${#imap_info}]}`"

    fmconf=("poll $imap with proto IMAP user \"$login\" there with password \"$password\"")

    [[ -z $accountopt ]] || { # add option configuration
        fmconf+=(" ${accountopt} ") }

    # check if folders on commandline
    if [[ "$1" != "" ]]; then

        unset password

        act "commanded to fetch folders: $1"
        folders=($1)


    else

        # if no folders specified, use all
        [[ "$folders" == "" ]] && {
            folders=(`imap_list_folders`) }
        act "${#folders} folders found"

        # unset here because listing folders still needed a pass
        unset password

        # nothing to download, bail out with error
        [[ ${#folders} == "0" ]] && return 1

        # remove excludes
        [[ ${#exclude} == "0" ]] || {
            func "exclude folders: $exclude"
            for e in ${exclude}; do
                # fuzzy match
                for f in ${folders}; do
                    [[ "$f" =~ "$e" ]] && {
                        folders=(${folders:#$f})
                    }
                done
            done
        }

    fi

    if [ "$cert" = "check" ]; then
        # we now use system-wide certs
        fmconf+=(" sslcertck ") # sslcertpath '$WORKDIR/certs'
    fi

    fmconf+=(" sslproto ${transport} warnings 3600 and wants mda \"jaro -q deliver\" ")


    fmconf+=(" antispam 571 550 501 554 ")

    [[ $accountopt =~ 'keep' ]] || {
        warning "planning to delete mails from server, account option: $accountopt" }

    func "fetch folders: $folders"

    # add folder configuration
    fmconf+=(" folder ${=folders} ");

    # try login without doing anything
    flog=("${(f)$(print "$fmconf" | fetchmail -v -c -f -)}")

    res=$?
    # examine result
    case $res in
        1)
            notice "No mails for $name"
            unset fmconf
            return 1
            ;;
        2)
            error "Invalid or unknown certificate for $imap"
            unset fmconf
            return 1
            ;;
        3)
            error "Invalid password for user $login at $imap"
            unset fmconf
            return 1
            ;;
        7)  warning "Mailbox selection failed (${flog[${#flog}]#*\(}"
            ;;
        *)
            func "fetchmail returns $res" ;;
    esac

    if [[ $DRYRUN = 0 ]]; then

        act "please wait while downloading mails to incoming..."

        print " $fmconf " | fetchmail -f - | awk '
/^fetchmail: No mail/ { next }
/^reading message/ { printf("."); next }
{ printf("\n%s\n",$0) }
END { printf("\n") }'

    else
        act "dryrun: nothing will be fetched really."
    fi

    unset fmconf

    return 0
}

################################################
# read an email from stdin and send it via msmtp
smtp_send() {
    fn smtp-send
    req=(account)
    ckreq || return 1

    read_account ${account}
    [[ $? = 0 ]] || {
        error "Invalid account: $account"
        return 1
    }

    # defaults
    [[ -z $auth ]] && { auth=plain }
    [[ -z $smtp_port ]] && { smtp_port=25 }

    notice "SMTP send via account ${account}"

    type=smtp
    host=$smtp
    port=$smtp_port

    # load known fingerprints
    typeset -A smtp_fingerprints
    [[ -s $MAILDIRS/smtp_fingerprints.zkv ]] && {
        zkv.load $MAILDIRS/smtp_fingerprints.zkv }
    known_fingerprint=${smtp_fingerprints[$smtp:$port]}
    # get the server's fingerprint
    print QUIT \
        | openssl s_client -starttls smtp \
        -connect $smtp:$smtp_port \
        -showcerts 2>/dev/null \
        | openssl x509 -fingerprint -md5 -noout \
        | awk -F '=' '/Fingerprint/ {print $2}' | sysread fingerprint
    fingerprint=$(print $fingerprint | trim)
    # force printing fingerprint to stderr
    oldquiet=$QUIET
    QUIET=0
    act "known  fingerprint: $known_fingerprint"
    act "server fingerprint: $fingerprint"
    [[ "$known_fingerprint" = "$fingerprint" ]] || {
        warning "fingerprint difference detected"
        # not the same?
        if [[ "$known_fingerprint" = "" ]]; then
            # never knew before, save it
            act "$smtp:$port new fingerprint acknowledged"
            smtp_fingerprints[$smtp:$port]="$fingerprint"
        else
            error "Server fingerprint mismatch!"
            warning "The known one was different, this may be a man in the middle!"
            warning "To override and forget the old one, edit $MAILDIRS/smtp_fingerprints.zkv"
            return 1
        fi
    }
    QUIET=$oldquiet

    zkv.save smtp_fingerprints $MAILDIRS/smtp_fingerprints.zkv

    [[ "$password" = "" ]] && {
        ask_password
        [[ $? = 0 ]] || {
            error "Error retrieving smtp password for $login on $host"
            unset password
            return 1 }
    }

    ztmp
    msmtpcfg=$ztmpfile
    sysread -o 1 <<EOF > $msmtpcfg
account default
from ${email}
user ${login}
host ${smtp}
port ${smtp_port}
tls on
tls_starttls on
tls_certcheck off
logfile "${MAILDIRS}/logs/msmtp.log"
auth ${auth}
password ${password}
EOF
    unset password
    msmtp -C $msmtpcfg -t
    res=$?
    func "msmtp returns: $res"
    return $res
}


######
# SEND
# this function should send all mails in outbox
send() {
    fn send *

    # list mails to send
    queue_outbox=`${=find} "${MAILDIRS}/outbox" -type f`
    queue_outbox_num=`print $queue_outbox | wc -l`
    [[ "$queue_outbox" = "" ]] && {
        notice "Outbox is empty, no mails to send."
        return 0 }

    [[ $DRYRUN = 1 ]] && { return 0 }

    # from here on we must unlock on error
    lock "${MAILDIRS}/outbox"

    for qbody in ${(f)queue_outbox}; do
        func "processing outbox queue: $qbody"
        # clean interrupt
        [[ $global_quit = 1 ]] && {
            error "User break requested, interrupting operation"
            break
        }

        # check if this is an anonymous mail
        hdr "$qbody" | grep -i '^from: anon' > /dev/null
        if [[ $? = 0 ]]; then

            ztmp
            anoncfg=$ztmpfile

            sysread -o 1 <<EOF > "$anoncfg"
REMAIL		n
POOLSIZE	0
SENDPOOLTIME	0m
RATE		100

PGPREMPUBASC	/var/lib/mixmaster/used-stats/pubring.asc
PUBRING		/var/lib/mixmaster/used-stats/pubring.mix
TYPE1LIST	/var/lib/mixmaster/used-stats/rlist.txt
TYPE2REL	/var/lib/mixmaster/used-stats/mlist.txt
TYPE2LIST	/var/lib/mixmaster/used-stats/type2.list

SENDMAIL=jaro -q smtp
ERRLOG=${MAILDIRS}/logs/mixmaster.log
VERBOSE=2

EOF

            notice "Sending out anonymous email via mixmaster"
            e_addr=()
            hdr $qbody | e_parse To
            hdr $qbody | e_parse Cc
            # cycle through recipients
            for _e in ${(k)e_addr}; do
                _n="${(v)e_addr[$_e]}"
                act "Sending to: $_n <$_e>"

                # parse subject line
                anonsubj=`hdr "$qbody" | awk '
/^Subject: / { for(i=2;i<=NF;i++) printf "%s ", $i }'`
                act "Subject: $anonsubj"

                # strip headers and send via mixmaster
                awk '
BEGIN { body=0 }
/^$/ { body=1 }
{ if(body==1) print $0 }
' "$qbody" \
    | mixmaster --config="$anoncfg" -m --to="$_e" --subject="$anonsubj"
                res=$?
                func "mixmaster returns $res"
            done

        else # normal send with msmtp

            act "Sending out email via ${account:-default} account"
            hdr "$qbody" | awk '
/^From:/ { print " .  " $0 }
/^To:/   { print " .  " $0 }
/^Cc:/   { print " .  " $0 }
/^Subject:/ { print " .  " $0 }
'

            tsize=`zstat +size "$qbody"`
            act "sending `human_size $tsize` over the network ..."
            jaro -q smtp -a ${account:-default} < "${qbody}"
            res=$?
        fi

        # evaluate results
        if [[ "$res" != "0" ]]; then
            error "Error sending mail, skipped"
        else
            notice "Mail sent succesfully"
            # whitelist those to whom we send mails
            hdr "$qbody" | learn recipient
            printfile "$qbody" | deliver sent
            [[ $? = 0 ]] && { rm "$qbody" }
        fi

    done

    unlock "$MAILDIRS/outbox"

    return $res
}

######
# PEEK
# this function will open the MTA to the imap server without fetching mails locally
peek() {
    fn peek $*

    read_account ${account}
    [[ $? = 0 ]] || {
        error "Invalid account: $account"
        return 1
    }

    is_online ${imap} ${imap_port}
    { test $? = 0 } || { return 1 }

    notice "Peek into remote imap account $name"

    folder=""
    if ! [ -z ${1} ]; then
		folder="${1}"
		act "opening folder ${folder}"
    fi

    case $transport in
		SSL*|TLS*) act "using secure connection ($transport)"
				   iproto="imaps" ;;
		plain) act "using clear text connection"
			   iproto="imap"  ;;
		*)
			error "Unknown transport: $transport"
			error "Configuration error in imap account ${account}"
			return 1 ;;
    esac
    # escape at sign in login
    ilogin=`print $login | sed 's/@/\\@/'`

    { test $DRYRUN != 1 } && {

		type=imap
		host=$imap
		port=$imap_port

		x_mutt -f ${iproto}://${ilogin}@${imap}:${imap_port}/${folder}

    } # DRYRUN
    return $?
}
