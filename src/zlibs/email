#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2014 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# extract all emails found in stdin, one per line
compose() {
    # no args, open in compose mode
    ${=mutt} -F $MUTTDIR/rc -H <(print "To: ${PARAM[@]}")
    return $?
}


queue() {
    local base;

    notice "Adding mail to the outbox queue"
    base="`hostname`-queue-`date +%Y-%m-%d-%H.%M.%S`"

    queue_to=($@)
    # set it ready for saving in outbux
    queue_body="$base"

    # pre-processing of the email headers
    cat | awk '
/User-Agent:/ { print "User-Agent: Jaro Mail <http://jaromail.dyne.org>"; next }
{ print $0 }
' > "$TMPDIR/${queue_body}.mail"

    maildirmake "$MAILDIRS/outbox"
    { test $? = 0 } || {
    act "updating outbox format to Maildir"
    # silently migrate the outbox from the old format to the new
    tmpp=(`find "$MAILDIRS/outbox" -type f`)
    if [ ${#tmpp} = 0 ]; then
        # the old format outbox is just empty
        rmdir "$MAILDIRS/outbox"
        maildirmake "$MAILDIRS/outbox"
    else
        # there are some mails to be sent in the old format outbox
        # preserve them while migrating to the new format
        # this code is less interesting, since it handles an old
        # format in JaroMail
        tmppp="$TMPDIR/jaro-outbox-migration-$RANDOM"
        mkdir -p $tmppp
        mv "$MAILDIRS/outbox/*" $tmppp/
        rmdir "$MAILDIRS/outbox"
        maildirmake "$MAILDIRS/outbox"
        # here we devince two useful arrays:
        # bodies: the list of mail bodies to send
        # corresponding to files with same name and extension .msmtp
        bodies=(`find "$tmppp" -type f -name '*.mail'`)
        for i in ${bodies}; do
        cat "$i" | deliver outbox
        { test $? = 0 } && { rm "$i" }
        done
        rmdir $tmppp
    fi
    }
    ${=mkdir} "$MAILDIRS/outbox/send"

    lock "$MAILDIRS/outbox"

    # check if recipients are a Group
    if [[ "${=queue_to}" =~ '@jaromail.group' ]]; then


    groupfile="`print ${=queue_to}|cut -d@ -f1`"
    act "email recipients are in group ${groupfile}"

    { test -r "$MAILDIRS/Groups/$groupfile" } || {
        maildirmake "$MAILDIRS/postponed"
        mv "${TMPDIR}/${queue_body}.mail" "$MAILDIRS/postponed/new"
        unlock "$MAILDIRS/outbox"
        error "Group not found: $groupfile"
        return 1 }

    recipients=`cat "$MAILDIRS/Groups/$groupfile" | grep -v '^#'`
    groupnum=`print ${recipients} | wc -l`
    groupmode=`head -n1 "$MAILDIRS/Groups/$groupfile" | awk '/^#mode/ { print $2 } { next }'`
    { test "$groupmode" = "" } && { groupmode="individual" }
    act "$groupnum recipients in total, sending mode $groupmode"


    case $groupmode in

        # individual group mode hides other recipients and send
        # multiple mail envelopes with each single recipient in To:
        individual)
        for i in ${(f)recipients}; do
            ig=${base}-${RANDOM}
            cat "${TMPDIR}/${queue_body}.mail" | \
            awk '/^To:/ { print "'"To: $i"'"; next } { print $0 }' \
            > "${MAILDIRS}/outbox/new/${ig}.mail"
        done
        ;;

        # carboncopy group mode sends a single envelope where all
        # recipients can see and reply to each other
        carboncopy|cc)
        cc=""
        for i in ${(f)recipients}; do
            if [ "$cc" = "" ]; then cc="$i"
            else cc+=", $i"; fi
        done
        ig=${base}-${RANDOM}
        cat "${TMPDIR}/${queue_body}.mail" | \
            awk '/^To:/ { print "'"To: $cc"'"; print "'"Reply-To: $cc"'"; next }
                { print $0 }' \
                    > "${MAILDIRS}/outbox/new/${ig}.mail"
        ;;
    esac

    else
    # recipients are set in the email envelope
    cat "$TMPDIR/$queue_body.mail" | deliver "outbox"
    fi

    unlock "$MAILDIRS/outbox"
    { test -r "${TMPDIR}/${queue_body}.mail" } && {
    ${=rm} "${TMPDIR}/${queue_body}.mail" }

    return 0
}

###########
# FETCHMAIL
fetchall() {
    notice "Fetching all accounts in $MAILDIRS"
    res=0
    accts=`${=find} $MAILDIRS/Accounts -type f | grep -v README`
    notice "Fetching mail for all accounts: ${#accts} found"
    for i in ${(f)accts}; do
        account=`basename $i`
        fetch
        if [ $? != 0 ]; then res=1; fi
        # returns an error if just one of the accounts did
    done
    return $res
}

fetch() {
    [[ "$account" = "" ]] && {
        fetchall; return $? }

    # setup global account variables
    read_account ${account}
    # name login host protocol port auth folders accountopt
    [[  $? = 0 ]] || {
        error "Invalid account: $account"
        return 1
    }

    notice "Fetching email for account ${account}"

    is_online ${imap} ${imap_port}
    [[ $? = 0 ]] || { return 1 }

    type=imap
    host=$imap
    port=$imap_port
    ask_password
    [[ $? = 0 ]] || {
        error "Impossible to fetch email for account ${account}";
        return 1 }

    # this puts total size in $imap_info
    # experimental only, commented out for now
    # get_imap_info

    # return here if the imap folders are all empty
    # { test ${imap_info[${#imap_info}]} = 0 } && {
    #	act "Mailbox is empty, nothing to fetch."
    #	return 0 }

    # notice "Total occupation is `human_size ${imap_info[${#imap_info}]}`"

    fmconf=("poll $imap with proto IMAP user \"$login\" there with password \"$password\"")

    [[ -z $accountopt ]] || { # add option configuration
        fmconf+=(" ${accountopt} ") }

    # check if folders on commandline
    if [[ "$PARAM[@]" = "" ]]; then

        # if no folders specified, use all
        [[ "$folders" == "" ]] && {
            folders=(`imap_list_folders`) }
        act "${#folders} folders found"

    else

        act "commanded to fetch folders: ${PARAM[@]}"
        folders=(${PARAM[@]})

    fi

    # unset here because listing folders still needed a pass
    unset password

    # nothing to download, bail out with error
    [[ ${#folders} == "0" ]] && return 1

    # remove excludes
    [[ ${#exclude} == "0" ]] || {
        func "exclude folders: $exclude"
        for e in ${exclude}; do
            folders=(${folders:#$e})
        done
    }
    func "fetch folders: $folders"

    # add folder configuration
    fmconf+=(" folder ${=folders} ");

    fmconf+=(" ${transport} warnings 3600 and wants mda \"jaro -q deliver\" ")

    if [ "$cert" = "check" ]; then
        # we now use system-wide certs
        fmconf+=(" sslcertck ") # sslcertpath '$WORKDIR/certs'
    fi


    fmconf+=(" antispam 571 550 501 554 ")

    print $accountopt | grep 'keep' > /dev/null
    [[ $? = 0 ]] || {
        error "planning to delete mails from server, account option: $accountopt" }

    # try login without doing anything
    print "$fmconf" | fetchmail -c -f -
    res=$?
    # examine result
    case $res in
        1)
            notice "No mails for $name"
            unset $fmconf
            return 1
            ;;
        2)
            error "Invalid or unknown certificate for $imap"
            unset $fmconf
            return 1
            ;;
        3)
            error "Invalid password for user $login at $imap"
            unset $fmconf
            return 1
            ;;
        *)
            func "fetchmail returns $ret" ;;
    esac

    if [[ $DRYRUN = 0 ]]; then

        act "please wait while downloading mails to incoming..."

        print " $fmconf " | fetchmail -f -

    else
        act "dryrun: nothing will be fetched really."
    fi

    unset $fmconf

    return 0
}


######
# SEND
# this function should send all mails in outbox
send() {
    adir="$WORKDIR/Accounts"


    # list mails to send
    queue_outbox=`${=find} "${MAILDIRS}/outbox" -type f`
    queue_outbox_num=`${=find} "${MAILDIRS}/outbox" -type f|wc -l`
    { test "$queue_outbox_num" = "0" } && {
        act "Outbox is empty, no mails to send."
        return 0 }

    read_account ${account}
    { test  $? != 0 } && {
        error "Invalid account: $account"
        return 1
    }

    # defaults
    [[ -z $auth ]] && { auth=plain }
    [[ -z $smtp_port ]] && { smtp_port=25 }

    is_online ${smtp} ${smtp_port}
    [[ $? = 0 ]] || {
        error "Smtp host not reachable: $smtp_host:$smtp_port"
        return 1 }

    notice "Sending out $queue_outbox_num mails via account ${account}"

    [[ $DRYRUN = 1 ]] && { return 0 }

    # from here on we must unlock on error
    lock "${MAILDIRS}/outbox"

    type=smtp
    host=$smtp
    port=$smtp_port
    ask_password
    [[ $? = 0 ]] || {
        error "Error retrieving password for $login on $smtp"
        unset password
        unlock "${MAILDIRS}/outbox"
        return 1 }

    for qbody in ${(f)queue_outbox}; do

        # check if this is an anonymous mail
        hdr "$qbody" | grep -i '^from: anon' > /dev/null
        if [[ $? = 0 ]]; then
            anoncfg="${TMPDIR}/${smtp}.anon.$RANDOM"
            cat <<EOF > "$anoncfg"
REMAIL		n
POOLSIZE	0
SENDPOOLTIME	0m
RATE		100

PGPREMPUBASC	/var/lib/mixmaster/used-stats/pubring.asc
PUBRING		/var/lib/mixmaster/used-stats/pubring.mix
TYPE1LIST	/var/lib/mixmaster/used-stats/rlist.txt
TYPE2REL	/var/lib/mixmaster/used-stats/mlist.txt
TYPE2LIST	/var/lib/mixmaster/used-stats/type2.list

SENDMAIL=msmtp -C $tmp -t
ERRLOG=${MAILDIRS}/logs/mixmaster.log
VERBOSE=2

EOF

            act "Sending out anonymous email via mixmaster"
            recipients=(`hdr $qbody | fetchaddr -a -x to | cut -d, -f1`)
            recipients+=(`hdr $qbody | fetchaddr -a -x cc | cut -d, -f1`)
            for r in ${recipients}; do
                act "Sending to: ${r}"

                # parse subject line
                anonsubj=`hdr "$qbody" | awk '
/^Subject: / { for(i=2;i<=NF;i++) printf "%s ", $i }'`
                act "Subject: $anonsubj"

                # strip headers and send via mixmaster
                cat  "$qbody" | awk '
BEGIN { head=1 }
/^To: /           { print $0; next }
/^Cc: /           { print $0; next }
/^Bcc: /          { print $0; next }
/^Date: /         { print $0; next }
/^Subject: /      { print $0; next }
/^In-Reply-To: /  { print $0; next }
/^References: /   { print $0; next }
/^Mime-Version: / { print $0; next }
/^Content-Type: / { print $0; next }
/^Content-Disposition: / { print $0; next }
/^$/ { head=0 }
{ if(head==0) print $0 }
' | tee -a "$qbody.anon" | mixmaster --config=$anoncfg -m --to="$r" --subject="$anonsubj"
                res=$?
                mv "$qbody.anon" "$qbody"
                func "mixmaster returns $res"
            done

            ${=rm} $anoncfg

        else # normal send with msmtp

            act "Sending out email"
            hdr "$qbody" | awk '
/^From:/ { print " .  " $0 }
/^To:/   { print " .  " $0 }
/^Cc:/   { print " .  " $0 }
/^Subject:/ { print " .  " $0 }
'

            tsize=`stat -c '%s' "$qbody"`
            act "sending `human_size $tsize` over the network ..."
            msmtp -C <(cat <<EOF
account default
from ${email}
user ${login}
host ${smtp}
port ${smtp_port}
tls on
tls_starttls on
tls_certcheck off
logfile "${MAILDIRS}/logs/msmtp.log"
auth ${auth}
password ${password}
EOF
            ) -t < "${qbody}"
            res=$?
        fi

        # evaluate results
        if [[ "$res" != "0" ]]; then
            error "Error sending mail, skipped"
        else
            notice "Mail sent succesfully"
            # whitelist those to whom we send mails
            cat "$qbody" | \
                "$WORKDIR/bin/jaro" -q learn recipient > /dev/null
            cat "$qbody" | deliver sent
            [[ $? = 0 ]] && { rm "$qbody" }
        fi

    done

    unset password
    unlock "$MAILDIRS/outbox"

    return 0
}

######
# PEEK
# this function will open the MTA to the imap server without fetching mails locally
peek() {
    read_account ${account}
    { test  $? != 0 } && {
    error "Invalid account: $account"
    return 1
    }

    is_online ${imap} ${imap_port}
    { test $? = 0 } || { return 1 }

    notice "Peek into remote imap account $name"

    folder=""
    if ! [ -z ${1} ]; then
    folder="${1}"
    act "opening folder ${folder}"
    fi

    case $transport in
    ssl|tls) act "using secure connection (SSL)"
        iproto="imaps" ;;
    plain) act "using clear text connection"
        iproto="imap"  ;;
    *)
        error "Unknown transport: $transport"
        error "Configuration error in imap account ${account}"
        return 1 ;;
    esac
    # escape at sign in login
    ilogin=`print $login | sed 's/@/\\@/'`

    { test $DRYRUN != 1 } && {

    type=imap
    host=$imap
    port=$imap_port
    ask_password

    { test $? != 0 } && {
        error "Error retrieving password for $login on $imap"
        unset password all; return 1
    }
    tmp="$TMPDIR/$imap.peek.$RANDOM"
    newlock "$tmp"
    cat <<EOF >> "$tmp"
set imap_pass = "${password}"
# set imap_peek = yes
EOF
    unset password
    print "source '$tmp'" > "$TMPDIR/muttpass"
    # when peeking don't mark unread messages as Old
    # and sort date received with no threading (latest up)
    cat <<EOF >> "$TMPDIR/muttpass"
unset mark_old
set sort=reverse-date-received
EOF
    (sleep 1;
        cp /dev/null "$TMPDIR/muttpass"
        unlink "$tmp" # secure delete in ram
    ) &
    ${=mutt} -F $MUTTDIR/rc	-f ${iproto}://${ilogin}@${imap}:${imap_port}/${folder}

    } # DRYRUN
    return $?
}

later() {
    func "Saving message from stdin into remember"
    filename=$USER.${hostname}.$datestamp.$RANDOM
    # hostname was set by the main jaro routine
    func "Filename: $filename"

    { maildircheck "${MAILDIRS}/remember" } || { maildirmake "${MAILDIRS}/remember" }
    cat > "${MAILDIRS}/remember/new/$filename"
}
