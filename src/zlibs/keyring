#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2014 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


# we use pinentry
# comes from gpg project and is secure
# it also conveniently uses the right toolkit
pin_entry() {
    cat <<EOF | pinentry 2>/dev/null | awk '/^D / { sub(/^D /, ""); print }'
OPTION ttyname=$TTY
OPTION lc-ctype=$LANG
SETTITLE Type your password
SETDESC Type the password for $1 @ $2
SETPROMPT Password:
GETPIN
EOF
}


# retrieve a password for user @ domain
# put it in variable password
# up to the caller to unset it after use
ask_password() {
    fn ask_password
    req=(login host email account)
    ckreq || return 1

    password=""
    act "retrieving login credentials for ${email} ($account)"
    act "username '$login' on host '$host'"
    func "keyring path: jaromail/${login}/${host}"

    # $host is set by the caller
    case $OS in
        MAC)
            act "looking for password in Mac/OSX keyring"
            security find-internet-password \
                     -c JARO -a $login -s $host > /dev/null
            [[ $? = 0 ]] && {
                act "saved password found in keyring"
                password=`security find-internet-password -c JARO -a $login -s $host -g 2>&1| awk '/^password:/ { print $2 }' | sed -e 's/"//g'`
            }
            ;;
        #####################################
        GNU)
            if [[ $PASS = 1 ]]; then
                act "looking for password in password-store"
                password=`pass show ${login}`
                [[ $? = 0 ]] && act "password found in password-store"
            elif [[ $SECRET_TOOL = 1 ]]; then
                act "looking for password in secret-tool"
                password=`secret-tool lookup protocol email username "$login" host "$host"`
                [[ $? = 0 ]] && act "saved password found in keyring"
            elif [ "$GNOMEKEY" = "1" ]; then
                act "looking for password in Gnome keyring"
                func "path: jaromail/${login}/${host}"
                print "protocol=email\npath=jaromail/${login}/${host}\nusername=${login}\nhost=${host}\n\n" \
                    | "$WORKDIR/bin/jaro-gnome-keyring" check
                [[ $? = 0 ]] && {
                    act "saved password found in keyring"
                    password=`print - "protocol=email\npath=jaromail/${login}/${host}\nusername=${login}\nhost=${host}\n\n" | "$WORKDIR/bin/jaro-gnome-keyring" get`
                }
            fi
            ;;
        *) ;;
    esac

    [[ "$password" = "" ]] && {
        act "no password found in keyring"
        # use pinentry alone
        new_password
        [[ $? = 0 ]] || {
            error "Password input aborted."
            return 1 }
    }

    return 0

}

new_password() {
    fn new_password
    req=(login host email account)
    ckreq || return 1

    notice "Setting a new password for account $account"
    act "Enter password for login '$login' on host '$host'"

    password=`pin_entry $login "on $account"`

    [[ "$password" = "" ]] && {
        error "No password given, operation aborted"
        return 1
    }

    case $OS in
        MAC)
            act "using Mac/OSX keyring password storage"
            security delete-internet-password \
                     -c JARO -a $login -s $host > /dev/null
            # we are ignoring the success of delete
            security add-internet-password \
                     -c JARO -a $login -s $host -w "${password}"

            if [[ $? = 0 ]]; then
                notice "New password saved in Mac/OSX keyring"
            else
                error "Error adding password to Mac/OSX keyring."
            fi

            ;;

        GNU)
            # USE PASS
            if [[ $PASS = 1 ]]; then
                act "using pass for password-store"
                print "$password\n" | pass insert ${login}
                if [[ $? = 0 ]]; then
                    notice "New password saved in password-store"
                else
                    error "Error saving password in password-store"
                fi

            # USE GNOME KEYRING
            elif [[ $SECRET_TOOL = 1 ]]; then
                act "using secret-tool password storage"
                print -n - $password \
                    | secret-tool store --label "jaromail stored password" \
                                  protocol email \
                                  username "$login" \
                                  host "$host"
                if [[ $? = 0 ]]; then
                    notice "New password saved in secret-tool"
                else
                    error "Error saving password in secret-tool"
                fi

            elif [ "$GNOMEKEY" = "1" ]; then
                act "using gnome-keyring password storage"
                func "path: jaromail/${login}/${host}"
                cat <<EOF | "$WORKDIR/bin/jaro-gnome-keyring" store
protocol=email
path=jaromail/${login}/${host}
username=${login}
host=${host}
password=${password}
EOF
              if [[ $? = 0 ]]; then
                  notice "New password saved in GNOME keyring"
              else
                  error "Error saving password in GNOME keyring"
              fi
            fi
            ;;
        *)  ;;
    esac
    return 0
}
