#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2015 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



###################
# Jaro Brother DB
create_addressbook() {
    # $ADDRESSBOOK is set in jaro
    ab="$ADDRESSBOOK"
    func "create addressbook: $ab"
    [[ -r "$ab" ]] && {
        error "Addressbook already exists: $ab"
        return 1
    }

    [[ -r "$MAILDIRS"/Addressbook ]] && {
        notice "Updating the old addressbook to a new format"
        _list=$list
        list=blacklist; export_old_to_abook
        list=whitelist; export_old_to_abook
        list=$_list
        mv "$MAILDIRS"/Addressbook "$MAILDIRS"/Addressbook.old 
    }

    touch "$ab"

    # make sure is private
    chmod 600 "$ab"
    chown $_uid:$_gid "$ab"

    return 0
}

insert_address() {
    _email="${1}"; _name="${2}";
    func "insert address: $_name <$_email>"

    lookup_email "$_email"

    [[ $? = 0 ]] && {
        func "address already present in $list"
        return 1
    }

    print "From: $_name <$_email>" | \
        abook --datafile "$ADDRESSBOOK" \
        --add-email-quiet > /dev/null

    return 0
}

search_addressbook() {
    fn search_addressbook $*
    
    abook --datafile "$ADDRESSBOOK" --mutt-query "${*:l}" | awk '
/^$/ { next }
{ for(c=2;c<=NF;c++) printf "%s ", $c
  print "<" $1 ">" }'

}


lookup_email() {
    _addr=${1:l}
    func "lookup address $_addr in $list"
    abook --datafile "$ADDRESSBOOK" \
        --mutt-query "$_addr" > /dev/null
    return $?
}

complete() {
	fn complete $*
	req=(list)
	ckreq || return 1

    # completion on configured groups
    { test -r "$MAILDIRS/Groups" } && {
        if [[ "$1" =~ "group/" ]]; then
            func "completion will look into groups"
            needle="${1[(ws:/:)2]}"
            if [ "$needle" = "" ]; then
                act "Listing all mailout groups"
                matches=`${=find} "$MAILDIRS/Groups" -type f`
            else
                act "Searching for \"$needle\" in mailout groups"
                matches=`${=find} "$MAILDIRS/Groups" -type f -name \"*$needle*\"`
            fi

            print "Groups: `print $matches | wc -l` matches"
            print
            for i in ${(f)matches}; do
                gr=`basename $i`
                print "$gr@jaromail.group\t`wc -l < $i` recipients"
            done
            return 0
        fi
    }

    act "Searching for \"$1\" in addressbook $list"
    abook --datafile "$ADDRESSBOOK" --mutt-query "$1"
    return $?
}

sender_isknown() {
	fn sender_isknown $*
    # extract only headers from stdin
    head="`awk '
{ print $0 }
/^$/ { exit }' | ${WORKDIR}/bin/fetchaddr -x From -a`"

    email="${head[(ws:,:)1]:l}"
    isemail $email
    [[ $? = 0 ]] || { return 1 }

    abook --datafile $MAILDIRS/$list.abook \
        --mutt-query "$email" > /dev/null
    return $?
}

learn() {
	fn learn $*
    [[ $DRYRUN == 1 ]] && func "running in dryrun mode, no entries added to addressbook"

    what=${1:-sender}
    func "learning from $what"

    # zero e_addr map before using e_parse
    e_addr=()

    case ${what} in
        
        sender|from) # simple: one address only on From:
            
            # now e_name e_mail and e_parsed are filled in
            
            awk '{ print $0 } /^$/ { exit }' | e_parse From
            
            # no need to cycle, From is always only one field
            [[ $DRYRUN == 0 ]] && {
                _e="${(k)e_addr}"
                _n="${(v)e_addr}"
                insert_address "$_e" "$_n"
                [[ $? = 0 ]] && { act "$list <- $_n <$_e>" }
            }
            return 0
            ;;

        all)

            awk '{ print $0 } /^$/ { exit }' | e_parse

            [[ $DRYRUN == 0 ]] && {
                # complex: more addresses in To: and Cc:
                for _e in ${(k)e_addr}; do
                    _n="${e_addr[$_e]}"
                    insert_address "$_e" "$_n"
                    [[ $? = 0 ]] && { act "$list <- $_n <${_e}>" }
                done
            }
            return 0
            ;;
        
        recipient|to)

            awk '{ print $0 } /^$/ { exit }' | e_parse To

            awk '{ print $0 } /^$/ { exit }' | e_parse Cc

            [[ $DRYRUN == 0 ]] && {
                # complex: more addresses in To: and Cc:
                for _e in ${(k)e_addr}; do
                    _n="${e_addr[$_e]}"
                    insert_address "$_e" "$_n"
                    [[ $? = 0 ]] && { act "$list <- $_n <${_e}>" }
                done
            }

            return 0
            ;;
        
        *)
            error "Unknown learning function: $what" ;;
    esac
    return 1

}


# import emails from VCard into abook
# checks if the emails are already known
import_vcard() {
	fn import_vcard $*
    vcard="$1"
	req=(vcard ADDRESSBOOK)
	freq=($vcard)
	ckreq || return 1

    head -n1 $vcard | grep '^BEGIN:VCARD' > /dev/null

    [[ $? = 0 ]] || {
        error "File to import is not a VCard: $vcard"
        return 1
    }

    notice "Import VCard in addressbook: ${vcard}"

    # parse the vcard and print a simple name and email list
    # each value on a single line, entry tuples followed by a #
    # we skip entries that don't have an email
    addresses=`cat ${vcard} | awk '
BEGIN { newcard=0; c=0; name=""; email=""; }
/^BEGIN:VCARD/ { newcard=1 }
/^FN:/ { if(newcard = 1) name=$0 }
/^EMAIL/ { if(newcard = 1) email=$0 }
/^END:VCARD/ {
  if(newcard = 1) {
    newcard=0
    if(email != "") {
      c+=1
      print name
      print email
      print "# " c
    }
    email=""
    next
  }
}
' | cut -d: -f2`

    # now parse the temporary list of name and emails
    # made of name, email and a hash for each, newline separated

    #    ${=rm} $tmp

    lock $ADDRESSBOOK

    newa=1; _name=""; _email=""
    for a in ${(f)addresses}; do
        { test "${a[1]}" = "#" } && {
            newa=1; # its the end of the entry

            # handle lines with multiple emails in vcard
            # TODO: generate Groups/${_name} from this
            for ee in ${=_email}; do
                # check if we have this email already
                _e=`print ${ee} | extract_emails`
                func "lookup_email: ${_e}"
                lookup_email "${_e}"

                [[ $? = 0 ]] || {
                    act "${a} ${_name} <${_e}>"
                    [[ $DRYRUN = 0 ]] && insert_address "${_e}" "${_name}"
                }
            done

            continue }
        if [[ $newa -eq 1 ]]; then
            # (V) makes special chars visible, we need to remove them..
            _name="${(V)a[(ws:^:)1]}"; newa=0; continue
        elif [[ $newa -eq 0 ]]; then
            _email="${(V)a[(ws:^:)1]}"
        fi
    done

    unlock $ADDRESSBOOK

    notice "Done importing addresses"
}

# import address lists from stdin
import() {
	fn import $*

    # case insensitive match
    unsetopt CASE_MATCH

	# if argument is a file, assume is a group (one address per line)
	# and add addresses from stdin to it, eliminating duplicates and
	# invalid lines
	[[ -r "$1" ]] && {
		notice "Import address list into file: $1"
		ztmp
		local oldgroup=$ztmpfile
		cp "$1" $oldgroup
		local oldlines=${"$(wc -l $1)"[(w)1]}
		ztmp
		local input=$ztmpfile
		grep -v '^#' >> $input
		cat $oldgroup $input | sort | uniq > "$1"
		local newlines=${"$(wc -l $1)"[(w)1]}
		act "New addresses found: $(( $newlines - $oldlines ))"
		return 0
	}

	# assume target is an addressbook
    notice "Import address list from stdin into addressbook $list"

    _new=0
    act "imported new entries will be printed on stdout"

    local parsed=0
    # read_stdin
    # _stdin=`cat` # reads into var _stdin
    for i in "${(f)$(cat)}"; do
        [[ $global_quit = 1 ]] && break

        # skip comments starting with #
        [[ "$i[1]" = "#" ]] && continue

		e_addr=()
        print - "From: $i" | e_parse From
        [[ $? = 0 ]] || continue

		parsed=$(( $parsed + 1 ))

        # check if the email is not already known
        lookup_email "${(k)e_addr}"
        [[ $? = 0 ]] && {
            func "email already known: ${(k)e_addr}"
            continue
        }

        # _n="${e_parsed[(ws:,:)2]}"

        print - "${e_addr} <${(k)e_addr}>"
        [[ $DRYRUN = 0 ]] && insert_address "${(k)e_addr}" "$e_addr"

        _new=$(( $_new + 1 ))
    done
    notice "Valid unique entries parsed: $parsed"
    act "new addresses found: ${_new}"
    return 0
}



# export old addressbook format to abook
export_old_to_abook() {
	fn export_old_to_abook $*

    [[ -r $MAILDIRS/Addressbook ]] || {
        notice "Old addressbook format not found"
        act "there is nothing to convert to abook"
        return 1
    }

    lock $MAILDIRS/Addressbook

    out=$MAILDIRS/$list.abook
    act "Exporting $list to abook format: $out"
    rm -f $out

    func "launching SELECT email,name sqlite3 query"
    addresses=`cat <<EOF | ${SQL} -column -header -batch $MAILDIRS/Addressbook \
    | grep -v '^email'
.width 40 100
.mode list
.separator '|'
SELECT email, name FROM $list;
EOF`

    unlock $MAILDIRS/Addressbook
    func "converting database into abook format"
    cat <<EOF > $out
# abook addressbook file

[format]
program=JaroMail
version=$VERSION

EOF
    c=0
    for a in ${(f)addresses}; do
        _email="${(Q)a[(ws:|:)1]}"
        # remove from name all what is an email between brackets
        # crop (trim) all beginning and ending whitespaces from name
        _name=`print ${(Q)a[(ws:|:)2]} | trim`
        { test "${_email}" != "" } && {
            cat <<EOF >> $out
[${c}]
name=${_name}
email=${_email}

EOF
            c=$(( $c + 1 ))
        }
    done

}

# export addressbook to vcard
convert_addresses() {
    fn convert_addresses $*
    _format=${1:-vcard}

    notice "Converting stdin addresses to format $_format"
    c=0
    ztmp
    for i in "${(f)$(cat)}"; do
        print "alias $i" >> $ztmpfile
        c=$(( $c + 1 ))
    done


    abook --convert --informat mutt \
        --infile "$ztmpfile" \
        --outformat $_format

    _res=$?

    if [[ $_res = 0 ]]; then
        notice "$c addresses converted to $_format"
    else
        error "Abook fails to convert addresses to format: $_format"
    fi
            
    return $_res
}

edit_abook() {
	fn edit_abook $*
	req=(ADDRESSBOOK)
	ckreq || return 1

    abook --config <(cat <<EOF
set autosave=true
set mutt_command=jaro compose
set sort_field=name
EOF
) --datafile "$ADDRESSBOOK"
}

# print out all addresses into the selected addressbook
list_abook() {
	fn list_abook $*
	req=(list ADDRESSBOOK)
	ckreq || return 1

    notice "Extracting all addresses in $list"
    awk -F'=' '
/^name/  { printf("%s ",$2)    }
/^email/ { printf("<%s>\n",$2) }
' $ADDRESSBOOK
    return 0
}

###################
