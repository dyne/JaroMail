#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2014 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

VERSION=2.1
DATE=May/2014
JAROMAILEXEC=$0
typeset -a OLDARGS
for arg in ${argv}; do OLDARGS+=($arg); done

##########################
# declare global variables

QUIET=0
DEBUG=0
DRYRUN=0
CLEANEXIT=1
CALLMUTT=1
TMPRAM=0

# global variables for binaries called
typeset -h rm mkdir mutt


# date stamp
datestamp=`date '+%d%b%y'`
##########################

# # # # SQL
# command
SQL=sqlite3


PARAM=()
typeset -A global_opts
typeset -A opts

# global variable for account selection
typeset -h account account_type
# account=default
typeset -h list
list=whitelist

# global variables for accounts
typeset -h name login imap imap_port smtp smtp_port protocol password auth accountopt
typeset -ah folders exclude
typeset -h host port type

# global variables for addressbook
typeset -h hostname addressbook addressbook_tmp

# global array for maildirs (filled by list_maildirs)
typeset -al maildirs


# global variable for mutt binary
typeset -h mutt pgpewrap dotlock

# global variable for exit code
typeset exitcode
exitcode=0

# global variable for infos on imap folder
# format: name;num_of_messages;size_in_bytes
# last entry is grand_total_in_bytes ${imap_info[${#imap_info}]}
typeset -alU imap_info

# global variable for mutt options
typeset -h muttflags

autoload colors; colors

# standard output message routines
# it's always useful to wrap them, in case we change behaviour later
notice() { if [[ $QUIET == 0 ]]; then print "$fg_bold[green][*]$fg_no_bold[default] $1" >&2; fi }
error()  { if [[ $QUIET == 0 ]]; then print "$fg[red][!]$fg[default] $1" >&2; fi }
func()   { if [[ $DEBUG == 1 ]]; then print "$fg[blue][D]$fg[default] $1" >&2; fi }
act()    {
    if [[ $QUIET == 0 ]]; then
	if [ "$1" = "-n" ]; then
	    print -n "$fg_bold[white] . $fg_no_bold[default] $2" >&2;
	else
	    print "$fg_bold[white] . $fg_no_bold[default] $1" >&2;
	fi
    fi
}

# honor quiet and debug flags as early as possible
if [[ ${@} == *-q* ]]; then QUIET=1; fi
if [[ ${@} == *-D* ]]; then DEBUG=1; fi


# what operating system are we in? use os_detect()
# simplifying modes of operation: GNU or MAC
case $(uname) in
    Linux) OS=GNU
	notice "Jaro Mail v$VERSION running on GNU/Linux"	;;

    Darwin) OS=MAC
	notice "Jaro Mail v$VERSION running on Mac/OSX"	;;

    *) OS=GNU # default
	error "Running on an unknown operating system, assuming GNU" ;;
esac

# check if we are inside the directory
if [ -r jaro/bin/jaro ]; then
	MAILDIRS=`pwd`

# check if we are on OSX
elif [ -r /Applications/JaroMail.app ]; then
    MAILDIRS="$HOME/Library/Application Support/JaroMail"

# else use GNU/Linux default
else
    MAILDIRS=$HOME/Mail
fi

# end override
{ test "$JAROMAILDIR" = "" } || { MAILDIRS="$JAROMAILDIR" }

# default working dir


# check if we are testing from source
if [ -r ../src/jaro ]; then
    WORKDIR="../src"
# check if we are on OSX
elif [ -r /Applications/JaroMail.app/Contents/Resources/jaro ]; then
    WORKDIR="/Applications/JaroMail.app/Contents/Resources/jaro"
else # use GNU/Linux default
    WORKDIR="/usr/local/share/jaromail"
fi

# env override
{ test "$JAROWORKDIR" = "" } || { WORKDIR="${JAROWORKDIR}" }


# which command to use when creating dirs
mkdir="`command -v mkdir` -m 700 -p"


act "Maildirs in $MAILDIRS"
act "System in $WORKDIR"
${=mkdir} "$MAILDIRS"
#${=mkdir} $WORKDIR

# make sure the permissions are private
#chmod 700 $WORKDIR
chmod 700 "$MAILDIRS"

PATH=$WORKDIR/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/opt/local/bin

# load our ZLibs
if [ -d $WORKDIR/zlibs ]; then
    # if testing from source load uncompiled libs
    if [ "$WORKDIR" = "../src" ]; then
	for z in `find $WORKDIR/zlibs -type f`; do
	    func "Loading zlib: ${z}"
	    . ${z}
	done
    else
	for z in `find $WORKDIR/zlibs -type f | grep -v '.zwc$'`; do
	    func "Loading zlib: ${z}"
	    . ${z}
	done
    fi
    act "full set of auxiliary functions loaded"
elif [[ $1 = source ]]; then
    act "limited set of auxiliary functions loaded"
else
    error "No ZLibs found in $WORKDIR/zlibs"
    error "This installation of Jaro Mail is broken."
    exit 1
fi

ACCOUNTS="$MAILDIRS/Accounts"
KEYRING="$MAILDIRS/Keyring"
addressbook="$MAILDIRS/Addressbook"

# temporary directory
TMPDIR="$MAILDIRS/tmp/jaromil.$USER"
case $OS in
    GNU)
	touch /dev/shm/jaromail.test.tmp > /dev/null
	{ test $? = 0 } && {
	# we can use volatile ram
	    TMPDIR=/dev/shm/tmp.jaromail.$USER
	    TMPRAM=1
	}

	# backward compatibility tests for old paths in JaroMail <1.3
	{ test -d $WORKDIR/Accounts } && { test ! -d $ACCOUNTS } && {
	    act "Updating accounts location: $ACCOUNTS"
	    cp -ra $WORKDIR/Accounts $ACCOUNTS }

	{ test -r "$WORKDIR/keyring" } && { test ! -r "$KEYRING" } && {
	    act "Updating keyring location: $KEYRING"
	    cp $WORKDIR/keyring "$KEYRING" }

	{ test -r $WORKDIR/addressbook } && { test ! -r $addressbook } && {
	    act "Updating addressbook location: $addressbook"
	    cp $WORKDIR/addressbook $addressbook }

	;;
    MAC)
	mount | grep 'JaroTmp' > /dev/null
	{ test $? = 0 } && {
	    # our RAM temp directory is active
	    TMPDIR=/Volumes/JaroTmp/jaromail.$USER
	    TMPRAM=1
	}
	;;
esac

# use the TMP in RAM if possible, for acceleration
{ test $TMPRAM = 1 } && {
    act "Using temporary directory in volatile RAM" }

# make sure we have a temp dir
${=mkdir} "$TMPDIR"
{ test $? != 0 } && {
    error "Cannot create temporary directory: $TMPDIR"
    return 1 }

hostname=$(hostname) # gather the current hostname

# make sure we have a directory for account configurations
{ test -d "$ACCOUNTS" } || { ${=mkdir} "$ACCOUNTS" }

# make sure we have a local keyring in case system-wide not found
{ test -r "$KEYRING" } || { create_keyring "$KEYRING" }

# make sure we have an addressbook
{ test -r "$addressbook" } || { create_addressbook "$addressbook" }

${=mkdir} "$MAILDIRS/logs"
# ${=mkdir} "$MAILDIRS/certs"

MUTTDIR="$MAILDIRS/.mutt"
{ test -d "$MUTTDIR" } || { ${=mkdir} "$MUTTDIR" }

# make sure we have Filters.txt Applications.txt Mutt.txt
{ test -r "$MAILDIRS/Filters.txt" } || {
    cp "$WORKDIR/Filters.txt" "$MAILDIRS/Filters.txt"
    notice "Default filters created" }

{ test -r "$MAILDIRS/Applications.txt" } || {
    cp "$WORKDIR/Applications.txt" "$MAILDIRS/Applications.txt"
    notice "Default helper applications settings created" }

{ test -r "$MAILDIRS/Mutt.txt" } || {
    cp "$WORKDIR/Mutt.txt" "$MAILDIRS/Mutt.txt"
    notice "Default Mutt configuration template created" }

# use gnome-keyring for passwords on GNU systems
GNOMEKEY=0
pidof gnome-keyring-daemon > /dev/null && {
	 act "using gnome-keyring to store secrets"
	 GNOMEKEY=1 }


cleanexit() {
    func "Clean exit procedures"

    # security check
    { test "$TMPDIR" = "" } && {
	error "Temporary directory not defined"
	act "skipping cleanup, this might leave private traces."
	return 1
    }

    # first delete dirs
    tmpdirs=`${=find} "$TMPDIR" -maxdepth 1 -type d`
    for d in ${(f)tmpdirs}; do
	{ test "$d" = "$TMPDIR" } || {
	    func "deleting dir: $d"
	    ${=rm} -r "${d}" }
    done

    # then locks, with a warning
    llist=`${=find} "$TMPDIR" -maxdepth 1 -type f -name '*.lock'`
    for l in ${(f)llist}; do
	lname=`basename ${(s:.lock:)l}`
	func "cleaning lock for $lname"

	# skip if in course of unlink - parallel operation, see unlink()
	pidfile="${TMPDIR}/$lname.pid"
	if [ -r ${pidfile} ]; then
	    pid=`cat $pidfile`
	    func "forced removal of lock left by pid $pid: $lname"
	    rm -f ${pidfile}
	else
	    func "forced removal of lock left by unknown pid: $lname"
	fi
	rm -f "${TMPDIR}/${lname}.lock"

	# remove the actual file
	if [ -r "${TMPDIR}/$lname" ]; then
	    func "deleting temp file: ${TMPDIR}/$lname"
	    ${=rm} "${TMPDIR}/$lname"
	else func "empty lock: file was already removed"; fi

    done


#    { test $TMPRAM = 1 } && { rmdir $TMPDIR }
}
# make sure tmp is wiped from sensitive data in case of sigINT
TRAPINT() {
	error "Caught signal, aborting operations."

	{ test $CLEANEXIT = 1 } && {
	    func "Forcing removal of locks"
	    cleanexit & }

	if [ "$DEBUG" = "1" ]; then return 1
	else exit 1; fi
}

# binary programs recognition
check_bin() {

    # required programs
    for req in pinentry fetchmail gpg; do
	command -v $req >/dev/null
	{ test $? != 0 } && {
	    error "Cannot find $req. Please install it."
	    exit 1
	}
    done

    # make sure a gnupg dir exists
    { test -r $HOME/.gnupg/pubring.gpg } || {
	${=mkdir} $HOME/.gnupg
	touch $HOME/.gnupg/pubring.gpg
	touch $HOME/.gnupg/secring.gpg
    }

    # which find command to use
    case $OS in
	GNU) find="find -O3" ;;
	MAC) find="gfind -O3" ;;
	*) find="find"
    esac

    # which wipe command to use
    if command -v wipe > /dev/null; then
	rm="wipe -f -s -q -R /dev/urandom"
    elif command -v srm > /dev/null; then
	rm="srm -m"
    else
	rm="rm -f"
    fi
    func "Rm binary: $rm"

    # which mutt binary to use
    if command -v mutt > /dev/null; then
	# system-wite
	mutt="mutt"
	# TODO: check if this is also the location on Fedora
	pgpewrap="/usr/lib/mutt/pgpewrap"
	dotlock="mutt_dotlock"
    elif command -v mutt-jaro > /dev/null; then
	# in-house compiled
	mutt=mutt-jaro
	pgpewrap=pgpewrap
	dotlock=dotlock
    else
	error "Cannot find Mutt. Please install it."
	exit 1
    fi
    func "Mutt binary: $mutt"
    # make sure there is always a muttpass file even if empty
    touch $TMPDIR/muttpass
    return 0
}


option_is_set() {
    #First argument, the option (something like "-s")
    #Second (optional) argument: if it's "out", command will print it out 'set'/'unset'
    #                       This is useful for if conditions
    #Return 0 if is set, 1 otherwise
    [[ -n ${(k)opts[$1]} ]];
    r=$?
    if [[ $2 == out ]]; then
	if [[ $r == 0 ]]; then
	    echo 'set'
	else
	    echo 'unset'
	fi
    fi
    return $r;
}
option_value() {
    #First argument, the option (something like "-s")
    <<< ${opts[$1]}
}


usage() {
    cat <<EOF | more
Jaro Mail $VERSION - your humble and faithful electronic postman

Synopsis: jaro [options] [command] [command-options]

Main commands:

 fetch  download unread emails from [account]
 send   send all mails queued in the outbox
 peek   look into the [account] mailbox without downloading
 search search maildirs or addressbook for strings

Options:

 -a     use a particular account instead of default (filename)
 -l     what list to use on Addressbook operations: white or black

 -h     print this help
 -v     version information for this tool
 -q     run quietly without printing information
 -n     dry run, show operations without executing them
 -D     print debugging information at runtime

== Addressbook commands (use -l to indicate which addressbook $list)
a pipe | in front indicate they take an email body from stdin

 import   import entries from a VCard file in the $list

 export   export the $list to VCard file (addressbook.vcf)

 abook    edit the $list using abook terminal curses editor

|learn    learn addresses from mails piped in stdin

|forget   remove addresses found in mails piped in stdin

 list     prints to console all the entries in a $list

 search   search into $list using a string parameter

|isknown  read e-mail from stdin, return 0 if sender is known


== Operational commands (use -a to indicate which $account)
account names correspond to the filenames, i.e. imap.default

 fetch    downloads emails locally from an $account on-line
	  option "keep" (default) to avoid deleting from servers

 send     send all emails queued in outbox/ to an smtp.$account

 peek     connect to an imap.$account with ncurses terminal mutt
	  remote folders supported. use to delete without download

 passwd   set account passwords in the OS native keyring
	  or into a simple, file based, gpg encrypted database.

|queue    queue a mail in outbox/ for send


== Storage commands (all take path to maildirs as arguments + mairix)
(mairix) commandline parsed intuitive expressions for date and strings
maildirs are directories of mails downloaded in Mail/

 open     open a maildir folder (can use -R for read-only)

 backup  (mairix)  move mails from a maildir to another one
	  match mails to move based on date ranges or strings

 rmdupes  remove all duplicated e-mails into a maildir

 merge    merge a maildir into another, removing all duplicates

 filter   passes a maildir through the configured and updated Filters.txt

 update   updates Filters.txt generating rules (sieve format)

 ramdisk [open|close]   activates fast cache in RAM on Mac/OSX (root)

Experimental commands:

 stat     prints a statistical overview on stored maildirs
 cert     import most common SSL certificates from the Internet

For a complete introductory documentation, see the User Manual in LaTeX
Website on <http://jaromail.dyne.org> Report bugs to <https://bugs.dyne.org>
EOF
}

typeset -A subcommands_opts

main()
    {
    ### Options configuration
    #Hi, dear developer! Are you trying to add a new subcommand, or to add some options?
    #Well, keep in mind that:
    # 1. An option CAN'T have differente meanings/behaviour in different subcommands.
    #    For example, "-s" means "size" and accept an argument. If you are tempted to add
    #    an option "-s" (that means, for example "silent", and doesn't accept an argument)
    #              DON'T DO IT!
    #     There are two reasons for that:
    #       I. usability; user expect that "-s" is "size
    #       II. Option parsing WILL EXPLODE if you do this kind of bad things
    #               (it will say "option defined more than once, and he's right)
    main_opts=(a: -account=a l: -list=l q -quiet=q D -debug=D h -help=h v -version=v n -dry-run=n f -force=f)
    subcommands_opts[__default]="R -readonly=R"
    subcommands_opts[compose]=""
    subcommands_opts[queue]=""
    subcommands_opts[fetch]=""
    subcommands_opts[send]=""
    subcommands_opts[peek]="R -readonly=R"
    subcommands_opts[open]="R -readonly=R"

    subcommands_opts[help]=""

    subcommands_opts[update]=""

    subcommands_opts[stat]=""

    subcommands_opts[search]=""

    subcommands_opts[learn]=""
    subcommands_opts[forget]=""
    subcommands_opts[list]=""
    subcommands_opts[complete]=""
    subcommands_opts[isknown]=""

    subcommands_opts[import]=""
    subcommands_opts[export]=""
    subcommands_opts[abook]=""

    subcommands_opts[edit]=""
    subcommands_opts[preview]=""

    subcommands_opts[later]=""
    subcommands_opts[backup]=""
    subcommands_opts[rmdupes]=""
    subcommands_opts[merge]=""
    subcommands_opts[filter]=""
    subcommands_opts[deliver]=""

    subcommands_opts[passwd]=""
    subcommands_opts[cert]=""

    subcommands_opts[ramdisk]=""
    subcommands_opts[source]=""

    subcommands_opts[isonline]=""

    subcommands_opts[init]=""

    subcommands_opts[publish]=""

    subcommands_opts[imap]=""

    subcommands_opts[extract]=""

    ### Detect subcommand
    local -aU every_opts #every_opts behave like a set; that is, an array with unique elements
    for optspec in $subcommands_opts$main_opts; do
	for opt in ${=optspec}; do
	    every_opts+=${opt}
	done
    done
    local -a oldstar
    oldstar=($argv)
    zparseopts -M -E -D -Adiscardme ${every_opts}
    unset discardme
    subcommand=$1
    if [[ -z $subcommand ]]; then
	subcommand="__default"
    fi

# QUAA
    if [[ -z ${(k)subcommands_opts[$subcommand]} ]]; then
 # unknown command, pass it to autostart
	func "unknown command, autostart: $@"
	autostart ${=@}
	exitcode=$?
	{ test $exitcode != 0 } && {
		error "command \"$subcommand\" not recognized"
		act "try -h for help"
		CLEANEXIT=0
	}
	return $exitcode
    fi

    argv=(${oldstar})
    unset oldstar

    ### Parsing global + command-specific options
    # zsh magic: ${=string} will split to multiple arguments when spaces occur
    set -A cmd_opts ${main_opts} ${=subcommands_opts[$subcommand]}
    if [[ -n $cmd_opts ]]; then #if there is no option, we don't need parsing
	zparseopts -M -E -D -Aopts ${cmd_opts}
	if [[ $? != 0 ]]; then
	    error "Some error occurred during option processing."
	    exitcode=1
	    return 1
	fi
    fi
  #build PARAM (array of arguments) and check if there are unrecognized options
    local ok=0
    for arg in $*; do
	if [[ $arg == '--' || $arg == '-' ]]; then
	    ok=1
	    continue #it shouldnt be appended to PARAM
	elif [[ $arg[1] == '-'  ]]; then
	    if [[ $ok == 0 ]]; then
		error "unrecognized option $arg"
		exitcode=1
		return 1
	    fi
	fi
	PARAM+=$arg
    done
  #first parameter actually is the subcommand: delete it and shift
    if [[ $subcommand != '__default' ]]; then
	PARAM[1]=()
	shift
    fi
  ### End parsing command-specific options

    if option_is_set -v; then
	cat $JAROMAILEXEC | awk '/^#/ {print $0 } !/^#/ {exit}'
	echo
    fi
    { option_is_set -a } && { account=`option_value -a` }
    { option_is_set -l } && {
	if [[ "`option_value -l`" =~ "black" ]]; then list=blacklist; fi
	if [[ "`option_value -l`" =~ "white" ]]; then list=whitelist; fi
    }
    { option_is_set -h } && { CLEANEXIT=0
	usage; return 0 }
    { option_is_set -v } && { CLEANEXIT=0
	cat $JAROMAILEXEC | awk 'BEGIN { v=1 } !/^#/ { exit }'
	return 0 }
    { option_is_set -q } && { QUIET=1 }
    { option_is_set -D } && { DEBUG=1; QUIET=0
	func "All debug messages ON" }
    { option_is_set -n } && { DRYRUN=1
	act "Dry run, show operations without executing them." }
    { option_is_set -R } && { muttflags+=" -R " }
    { option_is_set -f } && { FORCE=1 }

    case "$subcommand" in
	compose) compose ${PARAM} ;;
	queue)   queue ${PARAM} ;;
	fetch)
	    if [ "$account" = "" ]; then fetchall
	    else fetch; fi
	    filter_maildir incoming
	    ;;
	send)    send ${PARAM} ;; # was checking is_online
	peek)    peek ${PARAM} ;; # was checking is_online

	later)   later ${PARAM} ;;

	update|init)
	    init_inbox
	    update_filters
	    update_mutt
	    update_sieve
	    ;;

	help) CLEANEXIT=0; usage ;;

	search)  CLEANEXIT=0; search ${PARAM} ;;

	stat)   CLEANEXIT=0; stats ${PARAM} ;;

	complete) CLEANEXIT=0; complete ${PARAM}       ;;
	isknown)  CLEANEXIT=0; sender_isknown ${PARAM} ;;
	learn)    CLEANEXIT=0; learn ${PARAM}          ;;
	forget)   CLEANEXIT=0; forget ${PARAM}         ;;
	list)     CLEANEXIT=0; list_addresses ${PARAM} ;;

	import)  import_addressbook ${PARAM} ;;
	"export")  export_vcard ${PARAM}     ;;
	abook)   edit_abook ${PARAM}         ;;

	edit)    CLEANEXIT=0; edit_file ${PARAM}    ;;
	open)    CLEANEXIT=0; open_folder ${PARAM}  ;;
	preview) CLEANEXIT=0; preview_file ${PARAM} ;;

	backup)  backup ${PARAM}  ;;
	rmdupes) rmdupes ${PARAM} ;;
	merge)   merge ${PARAM}   ;;

	filter)
	    update_filters ${PARAM}
	    filter_maildir ${PARAM}
	    ;;

	deliver) deliver ${PARAM} ;;

    passwd) new_password ;;

    cert)    cert ${PARAM} ;; # was checking is_online

    ramdisk) ramdisk ${PARAM} ;;

    isonline) is_online ${=PARAM}; exitcode=$? ;;

	publish)
	    md="$1"
	    { maildircheck "$md" 2>/dev/null } || { md="${MAILDIRS}/${md}" }
	    pubdb_update "$md"
	    pubdb_render_maildir "$md"
	    exitcode=$? ;;

	'source')   CLEANEXIT=0; return 0 ;;
	__default)  func "no command provided"
	    autostart ${PARAM}
	    exitcode=$?
	    ;;

	imap)
	    imapcmd="$1"
	    case $1 in
		getsize)
		    read_account $account
		    ask_password
		    bytes_total=`imap_get_size "$2"`
		    notice "Size of account $login on $imap"
		    act "$bytes_total bytes"
		    mib_total=$(( $bytes_total / 1048576 ))
		    act "$mib_total MB (MiB)"
		    exitcode=$?
		    ;;
		listfolders)
		    read_account $account
		    ask_password
		    folders=(`imap_list_folders`)
		    notice "List of folders for $login on $imap"
		    for f in $folders; do
			print "$f"
		    done
		    exitcode=$?
		    ;;
		# interactive)
		#     read_account
		#     ask_password
		#     imap_interactive_shell
		#     exitcode=$?
		#     ;;
		*)
		    error "imap needs a subcommand: getsize or listfolders"
		    CLEANEXIT=0
		    ;;
	    esac
	    ;;
       
    extract)
            md_extract ${=@}
            exitcode=$?
            ;;
        
	*) # unknown command, pass it to autostart
	    func "unknown command, remote check"
	    autostart ${PARAM}
	    exitcode=$?
	    { $exitcode != 0 } && {
		error "command \"$subcommand\" not recognized"
		act "try -h for help"
		CLEANEXIT=0
	    }
	    ;;
    esac
    exitcode=$?
    return 0
}

check_bin
main $@
{ test "$CLEANEXIT" = "1" } && { cleanexit & }
return $exitcode
