#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyright (C) 2010-2023 Dyne.org Foundation
#
# JaroMail is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

PROGRAM=jaro-mail
VERSION=6.0
DATE=Nov/2023
JAROMAILEXEC=$0

# default permission on files
umask 066

# honor quiet and debug flags as early as possible
if [[ ${@} == *-q* ]]; then QUIET=1; fi
if [[ ${@} == *-D* ]]; then DEBUG=1; fi


# use GNU/Linux default in local
WORKDIR="/usr/local/share/jaromail"

# check if we are testing from source
if [[ -r ../src/jaro ]]; then
    WORKDIR="../src"
# check if we are on OSX
elif [[ -r /Applications/JaroMail.app/Contents/Resources/jaro ]]; then
    WORKDIR="/Applications/JaroMail.app/Contents/Resources/jaro"
elif [[ -r /usr/share/jaromail/bin/jaro ]]; then
    # use GNU/Linux default in usr
    WORKDIR="/usr/share/jaromail"
fi

# env override
WORKDIR=${JAROWORKDIR:-$WORKDIR}

# load our zuper extension
# different load paths from inside source or installed
if [ "$WORKDIR" = "../src" ]; then
	source $WORKDIR/zuper/zuper
else
	source $WORKDIR/zlibs/zuper
fi


# what operating system are we in? use os_detect()
# simplifying modes of operation: GNU or MAC
case $(uname -s) in
    Linux) OS=GNU
    notice "Jaro Mail v${VERSION} running on GNU/Linux"	;;

    Darwin) OS=MAC
    notice "Jaro Mail v${VERSION} running on Mac/OSX"	;;

    Cygwin) OS=WIN
        notice "Jaro Mail v${VERSION} running on MS/Win" ;;

    OpenBSD|FreeBSD|NetBSD) OS=BSD
	notice "Jaro Mail v${VERSION} running on a BSD System" ;;

    *) OS=GNU # default
    error "Running on an unknown operating system, assuming GNU" ;;
esac



# global variables
vars+=(DEBUG QUIET DRYRUN CALLMUTT MAILDIRS WORKDIR)
vars+=(ADDRESSBOOK ACCOUNTS)

QUIET=${QUIET:-0}
DEBUG=${DEBUG:-0}
DRYRUN=${DRYRUN:-0}
CALLMUTT=${CALLMUTT:-1}

# use gnome-keyring for passwords on GNU systems
vars+=(PASS GNOMEKEY SECRET_TOOL PASSWORD_STORE_DIR)
PASS=${PASS:-0}
GNOMEKEY=${GNOMEKEY:-0}
SECRET_TOOL=${SECRET_TOOL:-0}
# PASSWORD_STORE_DIR=${JARO_PASSWORD_STORE_DIR:-$MAILDIRS/.password-store}

# global variables for binaries called
vars+=(rm mkdir mutt SQL OS)

# load zsh modules
zmodload zsh/regex
zmodload zsh/mapfile
zmodload zsh/system
zmodload -F zsh/stat b:zstat
zmodload zsh/sched

##########################

# SQL command
SQL=sqlite3

vars+=(PROGRAM global_quit)
global_quit=0

# global variable for account selection
vars+=(account account_type)
account=default
vars+=(list)
list=whitelist

# global variables for accounts
vars+=(name login iproto imap imap_port smtp smtp_port protocol password auth accountopt)
arrs+=(folders exclude)
vars+=(proto host port type)
vars+=(my_hdr)

# global for server fingerprints
vars+=(fingerprint)

# global variables for addressbook
vars+=(hostname addressbook addressbook_tmp)

# global variables for email parsers
typeset -A e_addr
vars+=(e_parsed)

# global array for maildirs (filled by list_maildirs)
arrs+=(maildirs)
vars+=(last_deliver)

# stdin when read becomes globally accessible
vars+=(stdin bytesread)
stdin=""
bytesread=0

# global arrays for search results and mailpaths
# are all arrays of absolute paths
arrs+=(search_results mailpaths)
search_results=()

# global variable for mutt binary
vars+=(mutt pgpewrap dotlock)

# global variable for exit code
vars+=(exitcode)
# exitcode=0

# global variable for infos on imap folder
# format: name;num_of_messages;size_in_bytes
# last entry is grand_total_in_bytes ${imap_info[${#imap_info}]}
typeset -alU imap_info

# global variable for mutt options
vars+=(muttflags)

autoload colors; colors

# which command to use when creating dirs
mkdir="`command -v mkdir` -m 700 -p"


MAILDIRS="$PWD"
# check if we are on OSX
if [ -r /Applications/JaroMail.app ]; then
    MAILDIRS="$HOME/Library/Application Support/JaroMail"
# else use GNU/Linux default
elif [ -r "$HOME/Mail/Filters.txt" ]; then
	MAILDIRS="$HOME/Mail"
fi
# end override
MAILDIRS=${JAROMAILDIR:-$MAILDIRS}

# default addressbook
ADDRESSBOOK="$MAILDIRS/whitelist.abook"

ACCOUNTS="$MAILDIRS/Accounts"
ACCOUNTS=${JAROACCOUNT:-$ACCOUNTS}

act "System in $WORKDIR"
act "Mail in $MAILDIRS"
act "Accounts in $ACCOUNTS"

PATH="$WORKDIR/bin:$PATH"

# load our ZLibs
if [ -d $WORKDIR/zlibs ]; then
    # if testing from source load uncompiled libs
    if [ "$WORKDIR" = "../src" ]; then
		for z in `find $WORKDIR/zlibs -type f`; do
			[[ "$z" =~ "zuper" ]] && continue
			func "Loading zlib: ${z}"
			source ${z}
		done
    else
		fpath+=($WORKDIR/zlibs)
        for z in `ls $WORKDIR/zlibs`; do
            [[ "$z" =~ "zuper" ]] && continue
			[[ "$z" =~ ".zwc"  ]] && continue
            func "Loading zlib: ${z}"
            source $WORKDIR/zlibs/${z}
        done
    fi

    func "full set of auxiliary functions loaded"
elif [[ $1 = source ]]; then

    act "limited set of auxiliary functions sourced"

else
    error "No ZLibs found in $WORKDIR/zlibs"
    error "This installation of Jaro Mail is broken."
    exit 1
fi



##########
# complete
if [ "$WORKDIR" = "../src" ]; then
	source $WORKDIR/zuper/zuper.init
else
	source $WORKDIR/zlibs/zuper.init
fi


hostname=$(hostname) # gather the current hostname

[[ "$1" = "source" ]] || { # skip checks if just sourcing

    [[ -d "$MAILDIRS" ]] || { ${=mkdir} "$MAILDIRS" }

    # make sure the permissions are private
    chmod 700 "$MAILDIRS"

    [[ -d "$MAILDIRS/logs" ]] || { ${=mkdir} "$MAILDIRS/logs" }

    # make sure we have a directory for account configurations
    [[ -d "$ACCOUNTS" ]] || { ${=mkdir} "$ACCOUNTS" }

	[[ -r $ACCOUNTS/default.txt ]] || cp -a $WORKDIR/Accounts/* $ACCOUNTS/

    # make sure we have a local keyring in case system-wide not found
    # { test -r "$KEYRING" } || { create_keyring "$KEYRING" }

    # make sure we have an addressbook
    [[ -r "$ADDRESSBOOK" ]] || { create_addressbook "$ADDRESSBOOK" }


    MUTTDIR="$MAILDIRS/.mutt"
    { test -d "$MUTTDIR" } || { ${=mkdir} "$MUTTDIR" }

    # make sure we have Filters.txt Applications.txt Mutt.txt
    { test -r "$MAILDIRS/Filters.txt" } || {
        cp "$WORKDIR/Filters.txt" "$MAILDIRS/Filters.txt"
        notice "Default filters created" }

    { test -r "$MAILDIRS/Applications.txt" } || {
        cp "$WORKDIR/Applications.txt" "$MAILDIRS/Applications.txt"
        notice "Default helper applications settings created" }

    { test -r "$MAILDIRS/Mutt.txt" } || {
        cp "$WORKDIR/Mutt.txt" "$MAILDIRS/Mutt.txt"
        notice "Default Mutt configuration template created" }

} # if not sourcing

# binary programs recognition
check_bin() {

    # required programs
    for req in pinentry fetchmail gpg msmtp; do
        isfound $req
        { test $? != 0 } && {
            error "Cannot find $req. Please install it."
            exit 1
        }
    done

    # make sure a gnupg dir exists
    { test -r $HOME/.gnupg/pubring.gpg } || {
        ${=mkdir} $HOME/.gnupg
        touch $HOME/.gnupg/pubring.gpg
        touch $HOME/.gnupg/secring.gpg
    }

    # which find command to use
    case $OS in
        GNU) find="find -O3" ;;
        MAC) find="gfind -O3" ;;
        *) find="find"
    esac

    # which wipe command to use
    if  isfound wipe; then
        rm="wipe -f -s -q -R /dev/urandom"
    elif isfound srm; then
        rm="srm -m"
    else
        rm="rm -f"
    fi
    func "Rm binary: $rm"

    # which mutt binary to use
    if isfound mutt; then
	mutt_exec=mutt
    elif isfound neomutt; then
	mutt_exec=neomutt
    fi
    pgpewrap="${WORKDIR}/bin/gpgewrap"
    dotlock="${WORKDIR}/bin/dotlock"

    func "Mutt binary: $mutt_exec"
    func "Notmuch binary: `command -v notmuch`"
	func "Keyring set: $JARO_KEYRING"
	if [[ "$JARO_KEYRING" == "" ]]; then
		# check for pass, else fallback
		if isfound pass; then
			act "keyring in use: pass (auto-detected)"
			PASSWORD_STORE_DIR=${PASSWORD_STORE_DIR:-$HOME/.password-store}
			[[ -d $PASSWORD_STORE_DIR ]] ||
				warning "the 'pass' keyring is found but not initialised"

			PASS=1

			# check if secret-tool is present else fallback to gnome-keyring
		elif isfound secret-tool; then
			act "keyring in use: secret-tool (auto-detected)"
			SECRET_TOOL=1
		else
			ps ax | grep '[g]nome-keyring-daemon' > /dev/null
			[[ $? = 0 ]] && {
				act "keyring in use: gnome-keyring (auto-detected)"
				GNOMEKEY=1
			}
		fi

	else # JARO_KEYRING defined

		case $JARO_KEYRING in
			pass)
				act "keyring in use: pass (set in JARO_KEYRING)"
				PASSWORD_STORE_DIR=${PASSWORD_STORE_DIR:-$HOME/.password-store}
				[[ -d $PASSWORD_STORE_DIR ]] || {
					error "the 'pass' keyring is found but not initialised"
					error "run 'pass init your-gpg-id'"
				}
				PASS=1 ;;
			secret-tool)
				act "keyring in use: secret-tool (set in JARO_KEYRING)"
				SECRET_TOOL=1 ;;
			gnome-keyring)
				act "keyring in use: gnome-keyring (set in JARO_KEYRING)"
				GNOMEKEY=1  ;;
		esac

	fi


    return 0
}


usage() {
    cat <<EOF | more
Jaro Mail $VERSION - your humble and faithful electronic postman

Synopsis: jaro [options] [command] [command-options]

Main commands:

 fetch  download unread emails from [account]
 send   send all mails queued in the outbox
 peek   look into the [account] mailbox without downloading
 index  build or update the search index for all maildirs
 search search maildirs or addressbook for expressions

Options:

 -a     use a particular [account] instead of default
 -l     set [abook] in use, 'whitelist' is default
 -n     dry run, show operations without executing them
 -q     run quietly without printing information
 -D     print debugging information at runtime
 -v     version information for this tool
 -h     print this help

== Addressbook commands (use -l to indicate which addressbook)
a pipe | in front indicate they take an email body from stdin

 abook    edit the [abook] using the console editor

 extract  list addresses of all recipients or senders found in:
          maildir, search expr, vcard, gnupg keyring or pubkey

|import   read address list from stdin into addressbook or group
          (the output of extract commands can be piped to import)


== Operational commands (use -a to indicate [account])

 fetch    downloads emails locally from [account]

 send     send all outbox/ queue via the [account]'s smtp

 peek     interactive connection to an [account]'s imap folder
          (takes folder names as argument, default is INBOX)

 passwd   set [account]'s passwords in the OS native keyring

|queue    read a mail from stdin and queue it in outbox/ for sending

|smtp     read a mail from stdin and send it via [accounts]'s smtp


== Storage commands

 open     open a maildir folder (can use -R for read-only)

 backup   move search results from a maildir to another one
          (string or date range matches, can use -n for dry-run)

 merge    merge a source maildir into destination, then delete source

 update   updates all filter engine according to Filters.txt
          (also generates Sieve format rules ready for server use)

 filter   process a maildir distributing emails according to Filters.txt
          (if none specified, processes incoming/ - called by fetch)

For a complete introductory documentation, see the User Manual (PDF)
Website on <http://dyne.org/software/jaro-mail>
Report bugs to <https://github.com/dyne/JaroMail/issues>
EOF
}

typeset -A subcommands_opts

main() {
	# zuper option parser

    option_main=(a: -account=a l: -list=l q -quiet=q D -debug=D h -help=h v -version=v n -dry-run=n f -force=f)

    option_subcommands[__empty]="R -readonly=R"
    option_subcommands[compose]=""
    option_subcommands[queue]=""
    option_subcommands[fetch]=""
    option_subcommands[send]=""
    option_subcommands[peek]="R -readonly=R"
    option_subcommands[open]="R -readonly=R"

    option_subcommands[help]=""

    option_subcommands[update]=""

    option_subcommands[stat]=""

    option_subcommands[index]=""
    option_subcommands[search]=""

    option_subcommands[alot-config]=""
    option_subcommands[alot]=""
    option_subcommands[notmuch-config]=""
    option_subcommands[notmuch]=""

    option_subcommands[addr]=""
    option_subcommands[learn]=""
    option_subcommands[forget]=""

    option_subcommands[complete]=""
    option_subcommands[isknown]=""

    option_subcommands[list]=""
    option_subcommands[extract]=""
    option_subcommands[parse]=""
    option_subcommands[header]=""
    option_subcommands[headers]=""

    option_subcommands[import]=""
    option_subcommands[export]=""
    option_subcommands[vcard]=""
    option_subcommands[abook]=""
	option_subcommands[new]=""

    option_subcommands[vim]=""
    option_subcommands[edit]=""
    option_subcommands[preview]=""

    option_subcommands[replay]=""

    option_subcommands[remember]=""

    option_subcommands[backup]=""
    option_subcommands[rmdupes]=""
    option_subcommands[merge]=""
    option_subcommands[filter]=""
    option_subcommands[deliver]=""

    option_subcommands[passwd]=""
    option_subcommands[askpass]=""

    option_subcommands[source]=""

    option_subcommands[isonline]=""

    option_subcommands[init]=""

    option_subcommands[publish]=""

    option_subcommands[imap]=""

    option_subcommands[smtp]=""

    option_subcommands[crypt]=""
    option_subcommands[cryptsign]=""

    option_subcommands[isml]=""
    option_subcommands[ismd]=""

	option.parse $* || return 1
	func "subcommand: $subcommand"

    func "configure accounts in $ACCOUNTS"
	func "notmuch config in $MAILDIRS/notmuch-config"
	func "sieve filters in $MAILDIRS/Filters.sieve"

	# print out version
    if option.is_set -v; then
		cat $JAROMAILEXEC | awk '/^#/ {print $0 } !/^#/ {exit}'
		echo
    fi

    { option.is_set -a } && { account=`option.value -a` }
    { option.is_set -l } && {
        if [[ "`option.value -l`" =~ "black" ]]; then
            list=blacklist
        elif [[ "`option.value -l`" =~ "white" ]]; then
            list=whitelist
        else
            list=`option.value -l`
        fi
        ADDRESSBOOK="$MAILDIRS"/$list.abook
    }
    { option.is_set -h } && { usage; return 0 }
    { option.is_set -v } && {
        cat $JAROMAILEXEC | awk 'BEGIN { v=1 } !/^#/ { exit }'
        return 0
    }
    { option.is_set -q } && { QUIET=1 }
    { option.is_set -D } && { DEBUG=1; QUIET=0
    func "All debug messages ON" }
    { option.is_set -n } && { DRYRUN=1
    act "Dry run, show operations without executing them." }
    { option.is_set -R } && { muttflags+=" -R " }
    { option.is_set -f } && { FORCE=1 }

    # clean up options from param
    # PARAM=(${PARAM// -? /})

    case "$subcommand" in

    compose) stdin_compose ${option_params}
            exitcode=$?
            ;;

    queue)  stdin_queue ${option_params}
            exitcode=$?
            ;;

    fetch) 	fetch ${option_params} && \
                 update_filters && \
                 filter_maildir incoming && \
                 update_notmuch
			;;

    send)   send ${option_params}
            exitcode=$?
            ;;

    peek)   peek ${option_params}
            exitcode=$?
            ;;

    remember)
        deliver remember
        exitcode=$?
        ;;

    replay)
        replay ${option_params}
        exitcode=$?
        ;;

    init)
        init_inbox
		nm_setup
		[[ -r "$MAILDIRS/.envrc" ]] || {
			cat <<EOF > "$MAILDIRS/.envrc"
export JAROMAILDIR=$MAILDIRS
export JAROWORKDIR=/usr/local/share/jaromail
export NOTMUCH_CONFIG=$MAILDIRS/notmuch-config
EOF
		}
		command -v direnv >/dev/null || {
			direnv allow
			act "direnv configuration in .envrc"
		}
        notice "Initialization completed in $MAILDIRS"

        ;;

    update)
        [[ "$option_params" = "" ]] || {
            for p in $option_params; do
                [[ "$p" = "." ]] && p=$PWD
                [[ -d $p ]] && MAILDIRS=$p
            done
        }
        init_inbox
        update_filters
        update_sieve
        update_notmuch
        notice "Initialization completed in $MAILDIRS"
        ;;

    help) usage ;;

    index) nm_setup
		   nm_index
           exitcode=$?
           ;;

    # notmuch search with file output
    search) search ${option_params}
            [[ $DRYRUN = 1 ]] || {
                for i in ${search_results=}; do
                    print - "$i"
                done
            } | save_replay $subcommand
            ;;

	alot-config)
		alot_setup
		cat "$MAILDIRS/alot-config"
		notice "to set as default do:\nmkdir -p ~/.config/alot && jaro alot-config > ~/.config/alot/config"
		;;

    alot) alot_search ${option_params} ;;

	notmuch-config)
		nm_setup
		cat "$MAILDIRS/notmuch-config"
		;;
    notmuch)
            notice "Command: notmuch ${option_params}"
            nm ${option_params} | save_replay $subcommand
            exitcode=$?
            ;;

    addr|list) search_addressbook ${option_params}
               ;;

    complete) complete ${option_params}
              exitcode=$?
              ;;

    isknown) sender_isknown ${option_params}
             exitcode=$?
             ;;

    learn)  learn ${option_params}
            exitcode=$?
            ;;

    import) import ${option_params}
            exitcode=$?
            ;;

    "export")
            export_vcard ${option_params}
            ;;

    abook)  edit_abook ${option_params}
            exitcode=$?
            ;;

	new)
		new_account ${option_params}
		exitcode=$?
		;;

    stat*)  stats ${option_params} | sort -n
            exitcode=$?
            ;;

    edit|vim)   edit_file ${option_params}    ;;
    open)       x_mutt -f ${option_params}  ;;
    preview)    preview_file ${option_params} ;;

    mkdir)
        DEBUG=1 maildirmake ${option_params}
        exitcode=$?
        ;;

    copy)
        maildir_shift ${option_params} cp
        exitcode=$?
        ;;

    move)
        maildir_shift ${option_params} mv
        exitcode=$?
        ;;

    link)
        maildir_shift ${option_params} ln
        exitcode=$?
        ;;

    rmdupes) rmdupes ${option_params} ;;
    merge)   merge ${option_params}   ;;

    filter)
        update_filters || {
            error "error updating filters, operation aborted."
			return 1
        }
        filter_maildir ${option_params} | save_replay $subcommand
        exitcode=$?
        ;;

    deliver)
            deliver ${option_params}
            exitcode=$?
            ;;

    passwd) read_account $account
            host=${option_params:-$imap}
            new_password ;;

    # cert)    cert ${option_params} ;; # was checking is_online

    isonline) is_online ${option_params}; exitcode=$? ;;


    publish)
        md="$1"
        { maildircheck "$md" 2>/dev/null } || { md="${MAILDIRS}/${md}" }
        pubdb_update "$md"
        pubdb_render_maildir "$md"
        exitcode=$? ;;

    'source')   return 0 ;;

    askpass)
        read_account $account
        ask_password
        # shell escape special chars
        print - "$password" | sed '
s/\&/\\&/g
s/\$/\\$/g
s/ /\\ /g
s/;/\\;/g
s/\?/\\?/g
s/\*/\\*/g
' 
        # TODO: verify if this works with all passwords
        exitcode=$?
        ;;

    imap)
        imapcmd="${option_params[(w)1]}"
        case $imapcmd in
            console)
                read_account $account
                host=${imap:-$host}
                ask_password
                func "$login $password"
                cat <<EOF | run_imap_query
B00000 CAPABILITY
B00001 LOGIN "${login}" "${password}"
EOF
                ;;
            getsize)
                read_account $account
                host=${imap:-$host}
                ask_password
                bytes_total=`imap_get_size "$2"`
                exitcode=$?
                notice "Size of account $login on $imap"
                act "$bytes_total bytes"
                mib_total=$(( $bytes_total / 1048576 ))
                act "$mib_total MB (MiB)"
                ;;
            listfolders)
                read_account $account
                host=${imap:-$host}
                ask_password
                folders=(`imap_list_folders`)
                exitcode=$?
                notice "List of folders for $login on $imap"
                for f in $folders; do print - "$f"; done \
                    | save_replay $subcommand | column

                ;;
            # interactive)
            #     read_account
            #     ask_password
            #     imap_interactive_shell
            #     exitcode=$?
            #     ;;
            *)
                error "imap needs a subcommand: getsize or listfolders"
                ;;
        esac
        ;;

    # list)
    #     list_abook ${option_params}
    #     exitcode=$?
    #     ;;

    extract|parse)
        extract_addresses ${option_params} \
            | save_replay $subcommand
        exitcode=$?
        ;;

    header|headers)
        extract_headers ${option_params}
        exitcode=$?
        ;;

    smtp)
        smtp_send ${option_params}
        exitcode=$?
        ;;

    isml)
        ismailinglist
        [[ $? = 0 ]] && \
            notice "Email read from stdin is a mailinglist"
        exitcode=$?
        ;;

    ismd)
        maildircheck ${option_params}
        [[ $? = 0 ]] && \
            notice "Directory is a maildir: ${option_params}"
        exitcode=$?
        ;;

    __empty) # unknown command, pass it to autostart
        func "no command, autostart"
        func "subcommand: $subcommand"
		read_account "$account"
        if [[ "$subcommand" = "__empty" ]]; then
			# open folder
			if [[ "$option_params" = "" ]]; then
		        x_mutt -Z
		    else
		        x_mutt -f "$option_params"
		    fi
		fi
        exitcode=$?
		;;

	__unknown:*)
        # argument passed: determine if an email
		subcommand=${subcommand[(ws@:@)2]}
		func "subcommand: $subcommand"
		read_account "$account"
        if isemail "$subcommand"; then
            notice "Composing message to: $*"
            # its an email, TODO see if we have it in our addressbook
            x_mutt $*
            exitcode=0
            # or a directory of file
        elif maildircheck "$subcommand"; then
            # is it a maildir? then open
            x_mutt -f "$subcommand"
            exitcode=$?
        elif maildircheck "$MAILDIRS/$subcommand"; then
            x_mutt -f "$MAILDIRS/$subcommand"
            exitcode=$?
        elif [[ -f "$subcommand" ]]; then
            # is it a regular file? then ;attach it
            x_mutt -a $*
            exitcode=0
        else
            # just open; mutt on first unread folder
            x_mutt
            exitcode=$?

        fi
        ;;
    esac

    return $exitcode
}


check_bin
main $@
# endgame NOERRORS
# return $exitcode
